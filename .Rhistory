# 2 puntos vip
# 1 playa
# 2 cabos
# la funcion devuelve una lista con 3 objetos:
#   puntos_vip,puntos_cabo,ruta_pirata
p_interes<-function(islagrande){
# calculo la linea de costa isla grande
lin_costa<-st_cast(islagrande,"LINESTRING")
#borra los puntos
puntos_vip<-NULL
puntos_cabo<-NULL
punto_1<-NULL
# Puntos interiores
npuntos<-2
# ojo que esta funcion st_sample muchas veces no devuelve el num especificado en size,
# por eso voy a calcular 2 mas y me quedo con los 2 primeros.
puntos_vip<-st_sample(st_buffer(islagrande,-200),size=npuntos+3)
puntos_vip<-st_sf(puntos_vip)
puntos_vip<-puntos_vip[1:npuntos,]
# Punto enlinea de costa para playa
npuntos<-1
punto_1<-st_sample(lin_costa,size=npuntos+2,type="random")
punto_1<-st_sf(punto_1)
punto_1<-st_cast(punto_1,"POINT")
punto_1<-punto_1[1,] # por quedarme solo con 1
# Unimos los 3
puntos_vip<-st_union(punto_1,puntos_vip)
puntos_vip<-st_difference(st_cast(puntos_vip,"POINT"))
# Asignamos los nombres de los puntos
puntos_vip$nombre<-c("Playa Mosquito","Palmera Alta","Tesoro")
# Cabos
# simplificamos el contorno mucho para identificar vertices
cape<-st_simplify(islagrande,dTolerance =2000)#(radio-1000))
# convierto a linea
cape<-st_cast(cape,"LINESTRING")
# convierto a puntos
cape<-st_cast(cape,"POINT")
#st_crs(cape)
npuntos<-2
puntos_cabo<-st_sample(cape,size=npuntos+2,type="random")
puntos_cabo<-st_cast(puntos_cabo,"POINT")
puntos_cabo<-st_sf(puntos_cabo)
puntos_cabo<-puntos_cabo[1:npuntos,] # por quedarme solo con 2
puntos_cabo$nombre<-sample(c("Cabo Tormentas", "Cabo de la Desesperanza",
"Punta Negra","Punta de las flechas"),npuntos)
# creo una linea on la ruta del tesoro
ruta_pirata<-st_cast(st_combine(puntos_vip), "LINESTRING")
aux<-list(puntos_vip,puntos_cabo,ruta_pirata)
return(aux)
}
# Funcion pinta_mapa:
#   pinta el mapa completo del tesoro en plot base
pinta_mapa_negro<-function(is2,nom_I,p_int){
#Calcula el centroide de cada isla
is2_c<-st_centroid(is2,of_largest_polygon = FALSE)
# Pintamos todo
# pinta las islas
plot(st_geometry(is2), col="black", border = "black",  axes = TRUE, main="Mapa del tesoro del capitán Vilber", bg="gray81",family="Old English Text MT")  #darkslategray1
# Pinta los centroides
plot(st_geometry(st_centroid(is2)),pch = 3, col = 'white', add = TRUE)
# Pinta las lineas e costa del mar
plot(st_cast(st_buffer(is2,50),"MULTILINESTRING"), col = 'gray20', add = TRUE)
plot(st_cast(st_buffer(is2,100),"MULTILINESTRING"), col = 'gray23', add = TRUE)
plot(st_cast(st_buffer(is2,300),"MULTILINESTRING"), col = 'gray29', add = TRUE)
plot(st_cast(st_buffer(is2,500),"MULTILINESTRING"), col = 'gray32', add = TRUE)
# Etiquetas de las islas
text(st_coordinates(is2_c), labels = nom_I, pos = 4,family="Old English Text MT",col = 'white')
# Puntos de interes
plot(p_int[[1]],add=T,pch=4,cex=2,lwd=2,col="gray42")
plot(p_int[[2]],add=T,col="red",pch=4,cex=2)
plot(p_int[[3]],add=T, col="red",lwd=2,lty=2)
#Etiquetas de los puntos de interes
text(st_coordinates(p_int[[1]]), labels = p_int[[1]]$nombre, pos = 4,family="Old English Text MT",col = 'white',cex=0.9)
text(st_coordinates(p_int[[2]]), labels = p_int[[2]]$nombre, pos = 4,family="Old English Text MT",col = 'white',cex=0.7)
# añade escala y norte
addscalebar()#(style="ticks")
addnortharrow(pos = "topright", scale = 0.5)
}
################################################
# Funciones para hacer un mapa del tesoro con R
# Autor: Fernando Villalba Bergado
# Fecha: 2018-2019
################################################
mapa_tesoro<-function(){
radio<-10000
#crea una isla principal
islagrande<-crea_isla(R=radio)%>% pol_to_sf()%>%validar_contorno()
# crea archipielago
a<-archipielago(islagrande,radio=radio)
#junta las islas
islas1<-junta_igran_archi(islagrande,a)
#da los nombres y los punto de interes
nom_I<-nom_islas(length(a))
pun_int<-p_interes(islagrande)
#pinta_mapa(is2,nom_I)
aux<-pinta_mapa_negro(islas1,nom_I,pun_int)
return(aux)
}
mapa_tesoro()
################################################
# Funciones para hacer un mapa del tesoro con R
# Autor: Fernando Villalba Bergado
# Fecha: 2018-2019
################################################
pinta_mapa_color<-function(is2,nom_I,p_int,col="darkseagreen4"){
#Calcula el centroide de cada isla
is2_c<-st_centroid(is2,of_largest_polygon = FALSE)
# Pintamos todo
# pinta las islas
plot(st_geometry(is2), col=col, border = "burlywood4",  axes = TRUE, main="Mapa del tesoro del capitán Vilber", bg="darkslategray1",family="Old English Text MT")  #darkslategray1
# Pinta los centroides
plot(st_geometry(st_centroid(is2)),pch = 3, col = 'gray0', add = TRUE)
# Pinta las lineas e costa del mar
plot(st_cast(st_buffer(is2,100),"MULTILINESTRING"), col = 'deepskyblue1', add = TRUE)
plot(st_cast(st_buffer(is2,200),"MULTILINESTRING"), col = 'deepskyblue2', add = TRUE)
plot(st_cast(st_buffer(is2,400),"MULTILINESTRING"), col = 'deepskyblue3', add = TRUE)
plot(st_cast(st_buffer(is2,800),"MULTILINESTRING"), col = 'deepskyblue4', add = TRUE)
# Etiquetas de las islas
text(st_coordinates(is2_c), labels = nom_I, pos = 4,family="Old English Text MT",col = 'gray8')
# Puntos de interes
plot(p_int[[1]],add=T,pch=4,cex=2,lwd=2,col="darkred")
plot(p_int[[2]],add=T,col="red",pch=4,cex=2)
plot(p_int[[3]],add=T, col="red",lwd=2,lty=2)
#Etiquetas de los puntos de interes
text(st_coordinates(p_int[[1]]), labels = p_int[[1]]$nombre, pos = 4,family="Old English Text MT",col = 'darkred',cex=1.3)
text(st_coordinates(p_int[[2]]), labels = p_int[[2]]$nombre, pos = 4,family="Old English Text MT",col = 'gray3',cex=0.8)
# añade escala y norte
addscalebar()#(style="ticks")
addnortharrow(pos = "topright", scale = 0.5)
}
mapa_tesoro_c<-function(color_islas='navajowhite4'){
radio<-10000
#crea una isla principal
islagrande<-crea_isla(R=radio)%>% pol_to_sf()%>%validar_contorno()
# crea archipielago
a<-archipielago(islagrande,radio=radio)
#junta las islas
islas1<-junta_igran_archi(islagrande,a)
#da los nombres y los punto de interes
nom_I<-nom_islas(length(a))
pun_int<-p_interes(islagrande)
#pinta_mapa(is2,nom_I)
aux<-pinta_mapa_color(islas1,nom_I,pun_int,color_islas)
return(aux)
}
#plot(st_simplify(islagrande,dTolerance =2000,add=T))
mapa_tesoro_c()
mapa_tesoro_c("salmon4")
mapa_tesoro_c()
mapa_tesoro_c()
mapa_tesoro_c("salmon4")
mapa_tesoro()
mapa_tesoro()
mapa_tesoro()
mapa_tesoro()
mapa_tesoro()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
#rm(list=ls(all=TRUE))
# Crea poligono aleatorio de n vertices y diámetro medio R
pol_cero<-function(R=3000,nvert=5){
# R= diametro medio de la isla en m
I<- R/2 # Amplitud de desviación media de irregularidades
#N<-N # número de puntos base del boceto siempre <20
paso<-2*pi/nvert
# creamos poligono inicial como data.frame
pol_coord<-data.frame(x=NA,y=NA)
a<-runif(1,0.5,10) # añadimos una funcion seno a la amplitud
b<-runif(1,0.5,10) # añadimos otra funcion seno a la amplitud
for(i in 1:nvert-1){
#x<-(R+rnorm(1,I,I/3))*cos(paso*i)
#y<-(R+rnorm(1,I,I/3))*sin(paso*i)
x<-abs((R+I*sin(paso*i*a)+I*sin(paso*i*b)))*cos(paso*i)
y<-abs((R+I*sin(paso*i*a)+I*sin(paso*i*b)))*sin(paso*i)
pol_coord<-rbind(pol_coord,c(x,y))
}
pol_coord<-na.omit(pol_coord)
# Añadimos al final el punto origen para cerrar el poligono
pol_coord<-rbind(pol_coord,c(pol_coord[1,1],pol_coord[1,2]))
return(pol_coord)
}
#plot(pol_cero(,7),type="l")
# Creamos la función punto medio
puntomedio<-function(x1,y1,x2,y2){
# calcula el punto medio del lado y lo mueve
# un porcentaje aleatorio sobre al perpendicular del lado
xmed<-(x1+x2)/2
ymed<-(y1+y2)/2
# calculamos la tangente para sacar la perpendicular
vx<- -(y2-y1) # por anlgulos es el eje opuesto
vy<-(x2-x1)
# Este parametro d es importante y marca la desviación
# del nuevo punto respecto al lado
d<-0.3*runif(1,-1,1)
# coord del nuevo punto medio final
x0<-xmed+d*vx
y0<-ymed+d*vy
return(c(x0,y0))
}
# Función que divide en 2 cada lado del poligono
# los datos de entrada deben ser un data.frame
div_pol<-function(poligon){
n_pol<-data.frame(x=NA,y=NA)
# aplicamos la funión de punto medio
for (i in 1:nrow(poligon)-1){
n_pol<-rbind(n_pol,c(poligon[i,1],poligon[i,2]))
n_pol<-rbind(n_pol,puntomedio(poligon[i,1],poligon[i,2],
poligon[i+1,1],poligon[i+1,2]))
#n_pol<-rbind(n_pol,c(poligon[i+1,1],poligon[i+1,2]))
#esto era el fallo, se duplicaba la coordenada en el bucle
}
n_pol<-rbind(n_pol,c(poligon[nrow(poligon),1],poligon[nrow(poligon),2]))
n_pol<-na.omit(n_pol)
return(n_pol)
}
#2. funcion recursiva
div_pol_n<-function(poligon, N){
z<-poligon
for(i in 1:N){
z<- div_pol(z)
}
return(z)
}
# plot(div_pol_n(pol_cero(,3),5),type="l")
# Funcion final que devuelve el poligono de una isla
# aleaoria en formato poligono x-y
crea_isla<-function(R=5000,nver=6,N=5){
z<-pol_cero(R,nver)
z<-div_pol_n(z,N)
return(z)
}
plot(crea_isla())
plot(crea_isla(),col="black")
mancha<-crea_isla()
plot(mancha,col="black")
lines(mancha, col="red")
polygon(mancha, col="red")
plot(mancha,col="black")
polygon(mancha, col="red")
rnorm(8,10,2)
c(0,rnorm(8,10,2),0)
linea<-data.frame(x=c(0,rnorm(8,10L,3),0)
c(0,rnorm(8,10L,3),0)
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linea
plot(linea)
plot(linea, type="l")
plot(linea, type="l",col="white",bg="gray4")
plot(linea, type="l",col="white",bg="grey")
plot(linea, type="l",col="grey",bg="grey")
plot(linea, type="l",col="grey",bg="red")
plot(linea, type="l",col="grey",bg="red",axes=F)
par(bg="black")
plot(linea, type="l",col="grey",bg="red",axes=F,labal)
plot(linea, type="l",col="grey",bg="red",axes=F)
o
o
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
plot(linea, type="l",col="grey",axes=F)
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
plot(linea, type="l",col="grey",axes=F)
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
plot(linea, type="l",col="grey",axes=F)
plot(linea, type="l",col="grey",axes=F)
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
plot(linea, type="l",col="grey",axes=F)
plot(linea, type="l",col="grey",axes=F,lwd=2)
line(-linea,add=T)
-linea
linea[,-y]
line(linea[,-linea[2]],add=T)
inea[2]
linea[2]
-linea[2]
linea[,-linea[2]]
linversa<-data.frame(x=1:10,y=c(0,rnorm(8,-10,-3),0))
linversa<-data.frame(x=1:10,y=c(0,rnorm(8,-10,3),0))
linversa
plot(linea, type="l",col="grey",axes=F,lwd=2)
line(linversa,add=T)
line(linversa)
lines(linversa)
plot(linea, type="l",col="grey",axes=F,lwd=2)
lines(linversa)
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-10,10))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa)
lines(linversa,col="grey")
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20))
lines(linversa,col="grey")
lines(c(0,0),c(0,12))
lines(rbind(c(0,0),c(0,12)))
abline(0)
abline(h=0)
abline(h=0,col="grey")
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,12))
lines(linversa,col="grey")
abline(h=0,col="grey")
rnorm(8,10,3)
as.integer(rnorm(8,10,3))
b<-as.integer(rnorm(5,3,1))
rbind(a,b)
cbind(a,b)
c(rbind(a,b))
a<-as.integer(rnorm(5,10,3))
b<-as.integer(rnorm(5,3,1))
c(rbind(a,b))
a<-as.integer(rnorm(5,10,3))
a
b
a<-as.integer(rnorm(5,15,3))
b<-as.integer(rnorm(5,5,3))
c(rbind(a,b))
linea<-c(rbind(a,b))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,12))
a<-as.integer(rnorm(5,15,3))
b<-as.integer(rnorm(5,5,3))
linea<-c(0, c(rbind(a,b)),0)
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,12))
a<-as.integer(rnorm(6,15,3))
b<-as.integer(rnorm(5,5,3))
linea<-c(0, c(rbind(a,b)),0)
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,12))
abline(h=0,col="grey")
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
abline(h=0,col="grey")
a<-as.integer(rnorm(6,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
abline(h=0,col="grey")
l_inv<-c(0, -c(rbind(b,a)),0)
l_inv<-c(0, c(-rbind(b,a)),0)
a<-as.integer(rnorm(6,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
a<-as.integer(rnorm(5,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
l_inv<-c(0, c(-rbind(b,a)),0)
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
abline(h=0,col="grey")
lines(l_inv)
lines(l_inv,col="grey")
lines(l_inv, type= "l", col="blue")
lines(l_inv, type= "h", col="blue")
polygon(linea)
polygon(linea,col=gray(0.95), border=NA)
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,12))
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
linversa<-data.frame(x=2:11,y=c(0,rnorm(8,-10,3),0))
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,12))
lines(linversa,col="grey")
abline(h=0,col="grey")
l_sierra<-function(){
a<-as.integer(rnorm(5,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
l_inv<-c(0, c(-rbind(b,a)),0)
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
abline(h=0,col="grey")
lines(l_inv,col="grey")
lines(l_inv, type= "h", col="blue")
polygon(linea,col=gray(0.95), border=NA)
}
l_sierra()
l_sierra<-function(){
a<-as.integer(rnorm(5,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
l_inv<-c(0, c(-rbind(b,a)),0)
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
abline(h=0,col="grey")
lines(l_inv,col="grey")
#lines(l_inv, type= "h", col="blue")
polygon(linea,col=gray(0.95), border=NA)
}
l_sierra()
l_sierra()
l_sierra()
l_sierra()
l_sierra()
l_sierra<-function(){
a<-as.integer(rnorm(5,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
l_inv<-c(0, c(-rbind(b,a)),0)
plot(linea, type="l",col="grey",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
abline(h=0,col="grey")
lines(l_inv,col="grey")
#lines(l_inv, type= "h", col="blue")
polygon(linea,col=gray(0.55), border=NA)
}
l_sierra()
l_sierra()
linea<-data.frame(x=1:10,y=c(0,rnorm(8,10,3),0))
plot(linea, type="l",col=gray(0.15),axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
plot(linea, type="l",col="white",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
a<-as.integer(rnorm(5,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
l_inv<-c(0, c(-rbind(b,a)),0)
plot(linea, type="l",col="white",axes=F,lwd=2,ylim=c(-20,20),xlim=c(-2,20))
abline(h=0,col="grey")
lines(l_inv,col=gray(0.15))
lines(l_inv,col=gray(0.35))
#lines(l_inv, type= "h", col="blue")
polygon(l_inv,col=gray(0.55), border=NA)
#lines(l_inv, type= "h", col="blue")
polygon(l_inv,col=gray(0.75), border=NA)
#lines(l_inv, type= "h", col="blue")
polygon(l_inv,col=gray(0.95), border=NA)
l_sierra<-function(){
a<-as.integer(rnorm(5,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
l_inv<-c(0, c(-rbind(b,a)),0)
plot(linea, type="l",col="white",axes=F,lwd=1,ylim=c(-20,20),xlim=c(-2,20))
abline(h=0,col="grey")
lines(l_inv,col=gray(0.35))
#lines(l_inv, type= "h", col="blue")
polygon(l_inv,col=gray(0.95), border=NA)
}
l_sierra()
l_sierra()
l_sierra()
l_sierra()
l_sierra<-function(){
a<-as.integer(rnorm(5,15,4))
b<-as.integer(rnorm(5,5,4))
linea<-c(0, c(rbind(a,b)),0)
l_inv<-c(0, c(-rbind(b,a)),0)
plot(linea, type="l",col="white",axes=F,lwd=1,ylim=c(-20,20),xlim=c(-2,16))
abline(h=0,col="grey")
lines(l_inv,col=gray(0.35))
#lines(l_inv, type= "h", col="blue")
polygon(l_inv,col=gray(0.95), border=NA)
}
l_sierra()
l_sierra()
