geom_treemap() +
geom_flag(aes(country=code),size=10)+
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Fallecidos por COV-19",
caption="Source: JH")
library(treemapify)
install.packages("treemapify")
library(treemapify)
ggplot(df, aes(area = y, fill = factor(class))) +
geom_treemap() +
geom_flag(aes(country=code),size=10)+
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Fallecidos por COV-19",
caption="Source: JH")
ggplot(df, aes(area = y, fill = factor(class))) +
geom_treemap()
ggplot(df, aes(area = freq, fill = factor(class))) +
geom_treemap()
label = code)) +
df
ggplot(df, aes(area = freq,
fill = factor(class),
label = factor(class))) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre",
grow = T,
alpha = 0.5,
colour = "black",
fontface = "italic",
min.size = 0) +
geom_treemap_text(colour = "white", place = "topleft", reflow = T)
ggplot(df, aes(area = "freq",
fill = factor(class),
label = "class")) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre",
grow = T,
alpha = 0.5,
colour = "black",
fontface = "italic",
min.size = 0) +
geom_treemap_text(colour = "white", place = "topleft", reflow = T)
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "topleft", reflow = T)
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "topleft", reflow = T)+
labs(fill="Estado",
x=NULL,
y=NULL,
title="Fallecidos por COV-19",
caption="Source: JH")
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "topleft", reflow = T)+
labs(fill="Estado",
x=NULL,
y=NULL,
title="Fallecidos por COV-19",
caption="Source: JH") +
theme_cowplot(8)
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "white",
place = "topleft",
reflow = T,
grow = T,
alpha = 0.5)+
labs(fill="Estado",
x=NULL,
y=NULL,
title="Fallecidos por COV-19 abril 24 2020",
caption="Fuente: www.enRdados.net") +
theme_cowplot(8)
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "black",
place = "topleft",
reflow = T,
grow = T,
alpha = 0.5)+
labs(fill="Estado",
x=NULL,
y=NULL,
title="Fallecidos por COV-19 abril 24 2020",
caption="Fuente: www.enRdados.net") +
theme_cowplot(8)
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
geom_flag(aes(country=code),size=10)+
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="Pais",
x=NULL,
y=NULL,
title="Fallecidos por COV-19",
caption="Fuente: FVB")
pie + coord_polar(theta = "y", start=0)
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
#geom_flag(aes(country=code),size=10)+
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="Pais",
x=NULL,
y=NULL,
title="Fallecidos por COV-19",
caption="Fuente: FVB")
pie + coord_polar(theta = "y", start=0)
pie + coord_polar(theta = "y", start=0) +theme_cowplot(10)
pie + coord_polar(theta = "y", start=0)
theme_set(theme_classic(10))
pie + coord_polar(theta = "y", start=0)
install.packages("ggrepel")
p + theme_cowplot(8) +geom_text_repel()
library(ggrepel)
p + theme_cowplot(8) +geom_text_repel()
p + theme_cowplot(8) +geom_text_repel(aes(label=pais))
p + theme_cowplot(8) +geom_text_repel(aes(label=pais),size=9)
p + theme_cowplot(8) +geom_text_repel(aes(label=pais),size=4)
p + theme_cowplot(8) +geom_label_repel(aes(label=pais),size=4)
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "black",
place = "topleft",
reflow = T,
grow = T,
alpha = 0.5)+
labs(fill="Estado",
x=NULL,
y=NULL,
title="Fallecidos por COV-19 abril 24 2020",
caption="Fuente: www.enRdados.net") +
theme_cowplot(8) +theme(legend.title=element_blank())
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "black",
place = "topleft",
reflow = T,
grow = T,
alpha = 0.5)+
labs(fill="Estado",
x=NULL,
y=NULL,
title="Fallecidos por COV-19 abril 24 2020",
caption="Fuente: www.enRdados.net") +
theme_cowplot(8) +scale_fill(guide = 'none')
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "black",
place = "topleft",
reflow = T,
grow = T,
alpha = 0.5)+
labs(fill="Estado",
x=NULL,
y=NULL,
title="Fallecidos por COV-19 abril 24 2020",
caption="Fuente: www.enRdados.net") +
theme_cowplot(8) +scale_fill_discrete(guide = 'none')
p + theme_cowplot(8) +geom_label_repel(aes(label=pais),size=4) +scale_fill_discrete(guide = 'none')
p1 +geom_label_repel(aes(label=pais),size=4) +scale_fill_discrete(guide = 'none')
ggplot(df, aes(area = freq,
fill = factor(class),
label = class)) +
geom_treemap() +
geom_treemap_text(colour = "black",
place = "topleft",
reflow = T,
grow = T,
alpha = 0.5)+
labs(fill="Estado",
x=NULL,
y=NULL,
title="Fallecidos por COV-19 abril 24 2020",
caption="Fuente: www.enRdados.net") +
theme_cowplot(8) +
scale_fill_discrete(guide = 'none') # quito leyenda de fill
pie + coord_polar(theta = "y", start=0)+
geom_label_repel(aes(label=pais),size=4) +
scale_fill_discrete(guide = 'none') # quitamos la escala de fill
pie + coord_polar(theta = "y", start=0)+
geom_label_repel(aes(label=pais),size=4)
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# hacemos tabla simplificada
df <- head(dt_ultimos,12)#as.data.frame(table(mpg$class))
df
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
head(dat_m)
d_spain<- dat_m[dat_m[2]=='Spain',]#input$paises,]
head(dat_m)
dat_m[2]
d_spain<- dat_m[dat_m[2]=='Spain', ]
dat_m[dat_m[2]=='Spain', ]
dat_m[2]=='Spain'
head(dat_m)
d_spain<-dat_m[c(-1,-3,-4)]
head(d_spain)
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ 'Country/Region',dat_m,sum)
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ 'Country/Region',d_spain,sum)
ggregate(. ~ 'Country/Region',d_spain,sum)
aggregate(. ~ 'Country/Region',d_spain,sum)
colnames(d_spain)
colnames(d_spain)[1]<-"pais"
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ pais,d_spain,sum)
d_spain
d_spain <- dat_m[dat_m[2]=='Spain', ]
colnames(d_spain)
d_spain[d_spain$pais=='Spain', ]
d_spain<-transpose(d_spain)
library(tidyverse)
d_spain<-transpose(d_spain)
d_spain
d_spain$fecha <- as.Date(mdy(colnames(d_spain)))
library(lubridate)
d_spain$fecha <- as.Date(mdy(colnames(d_spain)))
head(d_spain)
d_spain<-dat_m[c(-1,-3,-4)]
head(d_spain)
colnames(d_spain)[1]<-"pais"
head(d_spain)
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ pais,d_spain,sum)
d_spain <- d_spain[d_spain$pais=='Spain', ]
str(d_spain)
d_spain<-transpose(d_spain)
str(d_spain)
d_spain$fecha <- as.Date(mdy(colnames(d_spain)))
st<-xts(x = d_spain[1], order.by = d_spain$fecha)
library(xts)
st<-xts(x = d_spain[1], order.by = d_spain$fecha)
str(d_spain)
anspose(d_spain)
transpose(d_spain)
head(d_spain)
d_spain<-dat_m[c(-1,-3,-4)]
head(d_spain)
colnames(d_spain)[1]<-"pais"
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ pais,d_spain,sum)
d_spain <- d_spain[d_spain$pais=='Spain', ]
head(d_spain)
head(d_spain)
d_spain<-dat_m[c(-1)]
head(d_spain)
d_spain <- d_spain[d_spain$pais=='Spain', ]
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ pais,d_spain,sum)
d_spain<-dat_m[c(-1,-3,-4)]
head(d_spain)
#d_spain<-dat_m[c(-1)]
colnames(d_spain)[1]<-"pais"
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ pais,d_spain,sum)
d_spain <- d_spain[d_spain$pais=='Spain', ]
str(d_spain)
d_spain<-d_spain[c(-1)]
d_spain
head(d_spain)
transpose(d_spain)
d_spain2<-transpose(d_spain)
str(d_spain2)
class(d_spain)
str(d_spain2)
str(d_spain2)
class(d_spain)
d_spain2<-t(d_spain)
str(d_spain2)
head(d_spain)
head(d_spain2)
colnames(d_spain2)<-c("fecha","numM")
colnames(d_spain2)
colnames(d_spain2)<-c("numM")
head(d_spain2)
#  str(d_spain2)
library(lubridate)
colnames(d_spain2)
names(d_spain2)
rownames(d_spain2)
d_spain$fecha <- as.Date(mdy(rownames(d_spain2)))
as.Date(mdy(rownames(d_spain2)))
d_spain$fecha <- as.Date(mdy(rownames(d_spain2)))
d_spain2$fecha <- as.Date(mdy(rownames(d_spain2)))
head(d_spain2)
d_spain2
#transponemos la data frame
d_spain2<-t(d_spain)
colnames(d_spain2)<-c("numM")
d_spain2
d_spain2$fecha <-1
d_spain2
colnames(d_spain2)<-c("numM")
#transponemos la data frame
d_spain2<-t(d_spain)
class(d_spain2)
#transponemos la data frame
d_spain2<-as.data.frame(t(d_spain))
class(d_spain2)
#d_spain2$fecha <-d_spain2$
colnames(d_spain2)<-c("numM")
d_spain2$fecha <- as.Date(mdy(rownames(d_spain2)))
d_spain2
st<-xts(x = d_spain2$numM, order.by = d_spain2$fecha)
plot.zoo(st)
colnames(st)<-c("numMuertosESP")
plot.zoo(st)
ggplot(st, aes(st)) + geom_line()
ggplot(st, aes(y=x)) + geom_line()
head(st)
head(index(st))
ggplot(st, aes(x=index(st),y=numMuertosESP)) + geom_line()
ggplot(st, aes(x=index(st),y=numMuertosESP)) + geom_line() + theme_cowplot(8)
library(cowplot)
ggplot(st, aes(x=index(st),y=numMuertosESP)) + geom_line() + theme_cowplot(8)
ggplot(st, aes(x=index(st),y=numMuertosESP, size=numMuertosESP)) + geom_line() + theme_cowplot(8)
# Vamos a crear un nuevo gráfico con la serie diaria de España
d_spain<-dat_m[c(-1,-3,-4)] # quitamos las columnas que no tiene dato
colnames(d_spain)[1]<-"pais" # cambio de nombre
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ pais,d_spain,sum)
d_spain <- d_spain[d_spain$pais=='Spain', ] # selec solo españa
d_spain<-d_spain[c(-1)] # quito la col primera
# transponemos y guardamos la serie como data frame
d_spain2<-as.data.frame(t(d_spain))
colnames(d_spain2)<-c("numM")
# esto es para las fechas convertir de texto aDate
library(lubridate)
d_spain2$fecha <- as.Date(mdy(rownames(d_spain2)))
# transformo en serie temporal xts
library(xts)
st<-xts(x = d_spain2$numM, order.by = d_spain2$fecha)
#colnames(st)<-c("numMuertosESP")
#library(cowplot)
# pintamos la gráfica como p0
p0<-ggplot(st, aes(x=index(st),y=numM, size=numM)) + geom_line() + theme_cowplot(8)
# Usamos la funcion de mala para comparar
plot_grid(p0, p1, labels = c('A', 'B'), label_size = 15)
st
colnames(st)<-c("numMuertosESP")
# Vamos a crear un nuevo gráfico con la serie diaria de España
d_spain<-dat_m[c(-1,-3,-4)] # quitamos las columnas que no tiene dato
colnames(d_spain)[1]<-"pais" # cambio de nombre
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ pais,d_spain,sum)
d_spain <- d_spain[d_spain$pais=='Spain', ] # selec solo españa
d_spain<-d_spain[c(-1)] # quito la col primera
# transponemos y guardamos la serie como data frame
d_spain2<-as.data.frame(t(d_spain))
colnames(d_spain2)<-c("numM")
# esto es para las fechas convertir de texto aDate
library(lubridate)
d_spain2$fecha <- as.Date(mdy(rownames(d_spain2)))
# transformo en serie temporal xts
library(xts)
st<-xts(x = d_spain2$numM, order.by = d_spain2$fecha)
colnames(st)<-c("numMuertosESP")
#library(cowplot)
# pintamos la gráfica como p0
p0<-ggplot(st, aes(x=index(st),y=numM, size=numM)) + geom_line() + theme_cowplot(8)
# Usamos la funcion de mala para comparar
plot_grid(p0, p1, labels = c('A', 'B'), label_size = 15)
# Vamos a crear un nuevo gráfico con la serie diaria de España
d_spain<-dat_m[c(-1,-3,-4)] # quitamos las columnas que no tiene dato
colnames(d_spain)[1]<-"pais" # cambio de nombre
#agregamos por pais, ya aue algunos tienen varias regiones
d_spain <- aggregate(. ~ pais,d_spain,sum)
d_spain <- d_spain[d_spain$pais=='Spain', ] # selec solo españa
d_spain<-d_spain[c(-1)] # quito la col primera
# transponemos y guardamos la serie como data frame
d_spain2<-as.data.frame(t(d_spain))
colnames(d_spain2)<-c("numM")
# esto es para las fechas convertir de texto aDate
library(lubridate)
d_spain2$fecha <- as.Date(mdy(rownames(d_spain2)))
# transformo en serie temporal xts
library(xts)
st<-xts(x = d_spain2$numM, order.by = d_spain2$fecha)
colnames(st)<-c("numMuertosESP")
#library(cowplot)
# pintamos la gráfica como p0
p0<-ggplot(st, aes(x=index(st),y=numMuertosESP, size=numMuertosESP)) +
geom_line() +
theme_cowplot(8)
# Usamos la funcion de mala para comparar
plot_grid(p0, p1, labels = c('A', 'B'), label_size = 15)
ggplot(st, aes(x=index(st),y=numMuertosESP, size=numMuertosESP)) +
geom_line() +scale_y_log10() +
theme_cowplot(8)
#library(cowplot)
# pintamos la gráfica como p0
p0<-ggplot(st, aes(x=index(st),y=numMuertosESP, size=numMuertosESP)) +
geom_line() +scale_y_log10() +
labs(y = 'num fallecidos ESP oficial', x= "fecha 2020")
theme_cowplot(8)
p0<-ggplot(st, aes(x=index(st),y=numMuertosESP, size=numMuertosESP)) +
geom_line() +scale_y_log10() +
labs(y = 'num fallecidos ESP oficial', x= "fecha 2020")
theme_cowplot(8)
#library(cowplot)
# pintamos la gráfica como p0
p0<-ggplot(st, aes(x=index(st),y=numMuertosESP, size=numMuertosESP)) +
geom_line() +scale_y_log10() +
labs(y = 'num fallecidos ESP oficial', x= "fecha 2020")+
theme_cowplot(8)
#library(cowplot)
# pintamos la gráfica como p0
p0<-ggplot(st, aes(x=index(st),y=numMuertosESP, size=numMuertosESP)) +
geom_line() + scale_y_log10() +
labs(y = 'num fallecidos ESP oficial', x= "fecha 2020") +
theme_cowplot(8)
# Usamos la funcion de mala para comparar
plot_grid(p0, p1, labels = c('A', 'B'), label_size = 15)
blogdown:::serve_site()
install.packages("dplyr")
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("suncalc")
blogdown:::new_post_addin()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
equinox(2020, season = "mar", tz = "UTC", want_dt = FALSE)
install.packages("fmdates")
equinox(2020, season = "mar", tz = "UTC", want_dt = FALSE)
library(fmdates)
equinox(2020, season = "mar", tz = "UTC", want_dt = FALSE)
equinox(c(2020), season = "mar", tz = "UTC", want_dt = FALSE)
equinox(c(2020,2021), season = "mar", tz = "UTC", want_dt = FALSE)
c(2020,2021)
equinox(c(2020,2021), season = "mar", tz = "UTC", want_dt = FALSE)
fmdates::equinox(c(2020,2021), season = "mar", tz = "UTC", want_dt = FALSE)
equinox(c(2020,1999), season = "mar", tz = "UTC", want_dt = FALSE)
easter_monday(2020)
library(fmdates)
equinox(c(2020,1999), season = "mar", tz = "UTC", want_dt = FALSE)
library(fmdates)
equinox(c(2020,1999), season = "mar", tz = "UTC", want_dt = FALSE)
EasterSunday(2015:2018)
easter_monday(2020:2023)
library(timeDate)
EasterSunday(2015:2018)
equinox(c(2020,1999), season = "mar", tz = "UTC", want_dt = FALSE)
EasterSunday(2015:2018)
equinox(2019:2020, season = "mar", tz = "UTC", want_dt = FALSE)
easter_monday(2020:2023)
equinox(2019:2020, season = "sep", tz = "UTC", want_dt = FALSE)
library("lubridate", warn.conflicts = FALSE)
equinox(2019:2020, season = "sep", tz = "UTC", want_dt = FALSE)
ausy <- AUSYCalendar()
aume <- AUMECalendar()
syme <- c(ausy, aume) # handy JointCalendar construction approach
is_good(ymd(20140404), ausy)
equinox(2019:2020, season = "sep", tz = "UTC", want_dt = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
EasterSunday(2015:2018)
library(fmdates)
library("lubridate", warn.conflicts = FALSE)
equinox(2019:2020, season = "sep", tz = "UTC", want_dt = FALSE)
easter_monday(2020:2023)
fmdates::equinox(2019:2020, season = "sep", tz = "UTC", want_dt = FALSE)
install.packages(c("anytime", "arm", "backports", "bit"))
install.packages(c("bit64", "broom", "data.table", "dbplyr", "devtools", "dplyr", "DT"))
install.packages(c("bit64", "broom", "data.table", "dbplyr", "devtools", "dplyr", "DT"))
install.packages(c("bit64", "broom", "data.table", "dbplyr", "devtools", "dplyr", "DT"))
install.packages(c("bit64", "broom", "data.table", "dbplyr", "devtools", "dplyr", "DT"))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
library(fmdates)
library("lubridate", warn.conflicts = FALSE)
equinox(2019:2020, season = "sep", tz = "UTC", want_dt = FALSE)
blogdown:::serve_site()
blogdown:::serve_site()
detach("package:fmdates", unload = TRUE)
detach("package:GENLIB", unload = TRUE)
detach("package:lubridate", unload = TRUE)
detach("package:Rcpp", unload = TRUE)
detach("package:sp", unload = TRUE)
