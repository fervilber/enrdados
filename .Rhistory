style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
puntos1<- st_point(lon=c(-3.7025599,2.1589899, -0.37739, -5.9731698),
lat= c( 	40.4165001,41.3887901,39.4697495,37.3828316))
puntos1<- st_point(c(-3.7025599,2.1589899, -0.37739, -5.9731698),
c( 	40.4165001,41.3887901,39.4697495,37.3828316))
plot(puntos1)
puntos1
punto1<- st_point(c(-3.7025599,40.4165001))
class(punto1)
linea1<- st_linestring(rbind(c(-3.7025599,40.4165001),c(2.1589899,41.3887901))
2.1589899, -0.37739, -5.9731698),
linea1<- st_linestring(rbind(c(-3.7025599,40.4165001),c(2.1589899,41.3887901)))
class(linea1)
plot(linea1)
plot(punto1,add=T)
plot(linea1)
plot(punto1,add=T)
plot(linea1)
plot(punto1,add=T, col="red")
# Creamos una capa sfc con las geomerías sfg del ejemplo anterior
coleccion<-st_sfc(punto1, linea1, crs = 4326)
class(coleccion)
# pintamos los sfc
plot(coleccion)
coleccion
st_crs(coleccion)
# Creamos una data frame
data <- data.frame(nombre = c("punto", "Linea"))
st_sf(cbind(data, coleccion))
st_sf(data, coleccion)
objeto_sf<- st_sf(data, coleccion)
class(objeto_sf)
objeto_sf
library(dplyr)
# vemos las variables que tiene la capa (la geometría es una de ellas)
summary(autonomias)
# vemos las variables que tiene la capa (la geometría es una de ellas)
class(autonomias)
head(autonomias$NOM_CCAA)
## seleccion
# todas las CCAA menos Canarias
autonomias %>% select(COD_CCAA)%>% filter(COD_CCAA!="04") %>% plot()
# Canarias sola
autonomias %>% select(COD_CCAA)%>% filter(COD_CCAA=="04") %>% plot()
st_set_geometry(objeto_sf,NULL)
# solo la geometría
st_geometry(objeto_sf)
blogdown:::serve_site()
blogdown:::serve_site()
puntos <- data.frame(ID = 1:4, lon = c(-2, 1,-1.5,0),lat = c(41, 42,40.5,40.6))
# pintamos los puntos
#plot(st_geometry(autonomias), col = "grey")
#points(puntos$lon,puntos$lat,col="red",pch = 19)
puntos <- st_as_sf(puntos, coords = c("lon", "lat"),crs=crs(autonomias, asText = TRUE))
# pintamos los puntos
#plot(st_geometry(autonomias), col = "grey")
#points(puntos$lon,puntos$lat,col="red",pch = 19)
puntos <- st_as_sf(puntos, coords = c("lon", "lat"),crs=st_crs(autonomias, asText = TRUE))
puntos_buf <- st_buffer(puntos, dist = 1)
#plot(st_geometry(autonomias))
plot(st_geometry(puntos_buf),col = "firebrick")
plot(st_geometry(puntos), pch = 16,col = "forestgreen", add = TRUE)
plot(st_geometry(puntos_buf),col = "firebrick")
plot(st_geometry(puntos), pch = 16,col = "forestgreen", add = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
# cargo librería sf
library(sf)
# generamos un poligono formado por otros 2
# resultado de dividir un cuadrado por la diagonal
m1 = cbind(c(0, 0, 1, 0), c(0, 1, 1, 0))
m2 = cbind(c(0, 1, 1, 0), c(0, 0, 1, 0))
# transformamos en una lista sf los 2 pol
pol0 = st_sfc(st_polygon(list(m1)), st_polygon(list(m2)))
pol<-st_sf(pol0)
zona<-st_union(pol)
# pintamos los dos poligonos
plot(pol)
text(x=c(0.25,0.75), y=c(0.75,0.25), labels = 1:2)
# generamos 5 puntos
p5<-st_sample(zona,size=5)
plot(p5,pch = 5,lwd=5, add = TRUE)
# pintamos los dos poligonos
plot(pol)
text(x=c(0.25,0.75), y=c(0.75,0.25), labels = 1:2)
plot(st_geometry(p5),pch = 5,lwd=5, add = TRUE)
# pintamos los dos poligonos
plot(st_geometry(pol))
text(x=c(0.25,0.75), y=c(0.75,0.25), labels = 1:2)
plot(p5,pch = 5,lwd=5, add = TRUE)
# generamos un capa de bufer
p5_buffer<-st_buffer(p5,dist=0.1)
plot(p5_buffer, add = TRUE)
# bufer contenido en rectanguno
vecinos_cont <- st_contains(zona,p5_buffer)
cont <- vecinos_cont[[1]]
plot(p5_buffer[cont], add = TRUE, col = "yellow")
plot(p5_buffer[cont], add = TRUE, col = alpha("yellow", 0.4))
plot(p5_buffer[cont], add = TRUE, col = scales::alpha("yellow", 0.4))
# pintamos los dos poligonos
plot(st_geometry(pol))
text(x=c(0.25,0.75), y=c(0.75,0.25), labels = 1:2)
# generamos 5 puntos
p5<-st_sample(zona,size=5)
plot(p5,pch = 5,lwd=5, add = TRUE)
# generamos un capa de bufer
p5_buffer<-st_buffer(p5,dist=0.1)
plot(p5_buffer, add = TRUE)
# bufer contenido en rectanguno
vecinos_cont <- st_contains(zona,p5_buffer)
cont <- vecinos_cont[[1]]
plot(p5_buffer[cont], add = TRUE, col = scales::alpha("yellow", 0.4))
plot(p5_buffer[cont], add = TRUE, col = rgb("yellow", 0.4))
zona<-pol0[[1]]
plot(zona, col="grey")
plot(p5,pch = 5,lwd=5, add = TRUE)
plot(p5_buffer, add = TRUE)
# bufer contenido en poligono
vecinos_inter <- st_intersects(zona,p5_buffer)
inter <- vecinos_inter[[1]]
plot(p5_buffer[inter], add = TRUE, col = "yellow")
# recortamos con clip
vecinos_clip <- st_intersection(p5_buffer, zona)
plot(zona, col="grey")
plot(p5,pch = 5,lwd=5, add = TRUE)
plot(p5_buffer, add = TRUE)
plot(p5_buffer[inter], add = TRUE, col = scales::alpha("yellow", 0.4))
# recortamos con clip
vecinos_clip <- st_intersection(p5_buffer, zona)
plot(vecinos_clip, add = TRUE, col = "red")
plot(zona, col="grey")
plot(p5,pch = 5,lwd=5, add = TRUE)
plot(p5_buffer, add = TRUE)
# bufer contenido en poligono
vecinos_inter <- st_intersects(zona,p5_buffer)
inter <- vecinos_inter[[1]]
plot(p5_buffer[inter], add = TRUE, col = scales::alpha("yellow", 0.4))
# recortamos con clip
vecinos_clip <- st_intersection(p5_buffer, zona)
plot(vecinos_clip, add = TRUE, col = scales::alpha("red", 0.5))
blogdown:::serve_site()
library(DiagrammeR)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1[sf]-->2[  sfc  ];
2-->3[  sfg  ];
2-->4[  CRS  ];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT)
3-->32(LINESTRING)
3-->33(MULTILINESTRING)
3-->34(POLYGON)
3-->35(MULTIPOLYGON)
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1[sf]-->2[     sfc    ];
2-->3[    sfg    ];
2-->4[    CRS    ];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT)
3-->32(LINESTRING)
3-->33(MULTILINESTRING)
3-->34(POLYGON)
3-->35(MULTIPOLYGON)
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph RL;
1[sf]-->2[     sfc    ];
2-->3[    sfg    ];
2-->4[    CRS    ];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT)
3-->32(LINESTRING)
3-->33(MULTILINESTRING)
3-->34(POLYGON)
3-->35(MULTIPOLYGON)
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph LR;
1[sf]-->2[     sfc    ];
2-->3[    sfg    ];
2-->4[    CRS    ];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT)
3-->32(LINESTRING)
3-->33(MULTILINESTRING)
3-->34(POLYGON)
3-->35(MULTIPOLYGON)
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
library(sf)
# Crear la geometría de un punto
punto1<- st_point(c(-3.7,40.41))
punto2<- st_point(c(-2.5,39.25))
class(punto1)
multip<-st_multipoint(punto1,punto2)
multip<-st_multipoint(rbind(punto1,punto2))
class(multip)
blogdown:::serve_site()
blogdown:::new_post_addin()
# Ejemplo de diagrama de flujo SANKEY
library(networkD3)      # cargamos librería
# Ejemplo de diagrama de flujo SANKEY
library(networkD3)      # cargamos librería
# Definimos los nodos de la red, que se numeran automáticamente de 0 a ..
nodes = data.frame("name" =
c("Fuente clara",  # Node 0
"Bombeo 1",      # Node 1
"Ayt. Villalocos",  # Node 2
"Ayt. Torrecilla",         # Nodo 3
"C.RR 1",        # Nodo 4
"C.RR 2",        # Nodo 5
"Embalse alto",  # Nodo 6
"Ayt. Puerto Plata", # Nodo 7
"Ayt. Jerjes",   # Nodo 8
"Fuente Negra"   # Nodo 9
))
# Definimos ahora los flujos en la forma siguiente:
# nodo origen, nodo final, cantidad de flujo
links = as.data.frame(matrix(c(
0, 1, 53, # desde, a, cuanto
0, 3, 5,
0, 4, 10,
1, 3, 5,
1, 8, 3,
1, 5, 7,
1, 4, 5,
1, 6, 32,
6,2,25,
6,7,7,
6,3,2,
9,3,40,
9,1,3),
byrow = TRUE, ncol = 3))
# nombramos las columnas con los nombres estándar de la librería networkD3
names(links) = c("source", "target", "value")
# Llamamos a la funcion de dibujo del diagrama
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 10, nodeWidth = 50,nodePadding = 10,
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"
)
)
## Otro ejemplo
URL <- paste0('https://cdn.rawgit.com/christophergandrud/networkD3/',
'master/JSONdata/energy.json')
energy <- jsonlite::fromJSON(URL)
# Plot
sankeyNetwork(Links = energy$links, Nodes = energy$nodes, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
units = 'TWh', fontSize = 12, nodeWidth = 30)
# Colour links
energy$links$energy_type <- sub(' .*', '',
energy$nodes[energy$links$source + 1, 'name'])
sankeyNetwork(Links = energy$links, Nodes = energy$nodes, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
LinkGroup = 'energy_type', NodeGroup = NULL)
# los colores del flujo los definimos en energy$links$energy_type
head(energy$links$energy_type)
energy$nodes
Source
energy
energy$nodes
head(energy)
kable(head(energy))
knirt::kable(head(energy))
knitr::kable(head(energy))
blogdown:::serve_site()
# Ejemplo de diagrama de flujo SANKEY
library(networkD3)      # cargamos librería
# Definimos los nodos de la red, que se numeran automáticamente de 0 a ..
nodes = data.frame("name" =
c("Fuente clara",  # Node 0
"Bombeo 1",      # Node 1
"Ayt. Villalocos",  # Node 2
"Ayt. Torrecilla",         # Nodo 3
"C.RR 1",        # Nodo 4
"C.RR 2",        # Nodo 5
"Embalse alto",  # Nodo 6
"Ayt. Puerto Plata", # Nodo 7
"Ayt. Jerjes",   # Nodo 8
"Fuente Negra"   # Nodo 9
))
# Definimos ahora los flujos en la forma siguiente:
# nodo origen, nodo final, cantidad de flujo
links = as.data.frame(matrix(c(
0, 1, 53, # desde, a, cuanto
0, 3, 5,
0, 4, 10,
1, 3, 5,
1, 8, 3,
1, 5, 7,
1, 4, 5,
1, 6, 32,
6,2,25,
6,7,7,
6,3,2,
9,3,40,
9,1,3),
byrow = TRUE, ncol = 3))
# nombramos las columnas con los nombres estándar de la librería networkD3
names(links) = c("source", "target", "value")
# Llamamos a la funcion de dibujo del diagrama
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 10, nodeWidth = 50,nodePadding = 10,
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"
)
)
knitr::kable(head(energy),"html")
head(energy)
str(energy)
class(energy)
blogdown:::insert_image_addin()
blogdown:::serve_site()
energy$links$energy_type
blogdown:::serve_site()
install.packages("radiant")
install.packages("ggforce")
blogdown:::serve_site()
# Ejemplo de diagrama de flujo SANKEY
library(networkD3)      # cargamos librería
# Definimos los nodos de la red, que se numeran automáticamente de 0 a ..
nodes = data.frame("name" =
c("Fuente clara",  # Node 0
"Bombeo 1",      # Node 1
"Ayt. Villalocos",  # Node 2
"Ayt. Torrecilla",         # Nodo 3
"C.RR 1",        # Nodo 4
"C.RR 2",        # Nodo 5
"Embalse alto",  # Nodo 6
"Ayt. Puerto Plata", # Nodo 7
"Ayt. Jerjes",   # Nodo 8
"Fuente Negra"   # Nodo 9
))
# Definimos ahora los flujos en la forma siguiente:
# nodo origen, nodo final, cantidad de flujo
links = as.data.frame(matrix(c(
0, 1, 53, # desde, a, cuanto
0, 3, 5,
0, 4, 10,
1, 3, 5,
1, 8, 3,
1, 5, 7,
1, 4, 5,
1, 6, 32,
6,2,25,
6,7,7,
6,3,2,
9,3,40,
9,1,3),
byrow = TRUE, ncol = 3))
# nombramos las columnas con los nombres estándar de la librería networkD3
names(links) = c("source", "target", "value")
# Llamamos a la funcion de dibujo del diagrama
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 10, nodeWidth = 50,nodePadding = 10,
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"
)
)
head(links)
head(nodes)
as.factor(nodes)
bd <- gather_set_data(links, 1:2)
library(reshape2)
bd <- gather_set_data(links, 1:2)
library(ggforce)
bd <- gather_set_data(links, 1:2)
bd
head(links)
links$nom<-links$source+1
head(links)
head(nodes)
head(as.factor(nodes))
head(as.factor(nodes))
data <- reshape2::melt(Titanic)
data <- reshape2::melt(Titanic)
head(gather_set_data(data, 1:4),12)
bd
gplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = y), alpha = 0.3, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = y), alpha = 0.3, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
head(links)
links$source<-links$source+1
links[,-4]
bd <- gather_set_data(links, 1:2)
bd
links$target<-links$target+1
bd <- gather_set_data(links, 1:2)
bd
#links[,-4]
ggplot(links, aes(bd, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = y), alpha = 0.3, axis.width = 0.1) +
head(as.factor(nodes))
#links[,-4]
ggplot(links, aes(links, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = y), alpha = 0.3, axis.width = 0.1) +
head(as.factor(nodes))
#links[,-4]
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = y), alpha = 0.3, axis.width = 0.1) +
head(as.factor(nodes))
#links[,-4]
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = y), alpha = 0.3, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
#links[,-4]
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = x), alpha = 0.3, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
#links[,-4]
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = nom), alpha = 0.6, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
head(links)
links[,-4]
links<-links[,-4]
links
nodes
head(as.factor(nodes))
links$nom<-factor(links$source, levels = c(9, 5, 4, 3, 6, 7, 8, 2, 1, 10))
links
fac<-as.factor(nodes))
fac<-as.factor(nodes)
fac
fac[2]
fac(2)
fac[[2]]
fac[2]
fac[1]
fac
links$nom[3]
links$nom[1]
links$nom[12]
nodes[links$nom[12]]
links$nom[12]
nodes[links$source]
links$nombre<-nodes[links$source]
nodes
links$source
sapply(links$source, function(x){nodes[x]})
nodes
nodes$name[1]
sapply(links$source, function(x){nodes$name[x]})
links$origen<-sapply(links$source, function(x){nodes$name[x]})
links$destino<-sapply(links$target, function(x){nodes$name[x]})
links
links<-links[,-4]
links
bd <- gather_set_data(links, 4:5)
bd
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = nom), alpha = 0.6, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = y), alpha = 0.6, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = value), alpha = 0.6, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
ggplot(bd, aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = value), alpha = 0.6, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.3) +
geom_parallel_sets_labels(colour = 'white')
head(links)
blogdown:::serve_site()
