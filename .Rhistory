# voy a descargar una capa que tengo de shp de la confederación, para delimitar las costas
# cargo otras capas en shp que tengo
# pero que están en UTM por lo que transformo crs
#../../
chs <- st_read("static/capas/CHS_Cuenca_del_Segura.shp")
st_crs(chs)<-23030
chs<-st_transform(chs,crs=4326)
# cortamos la capa a la zona del Mar Menor
# para eso usamos la capa de lineas de rios
chs<-st_crop(chs,rios$osm_lines)
cfondo<-"sandybrown" # rgb(255,245,245,max = 255)
clineas<-rgb(15,30,55,max = 255)
#cfondo<-rgb(15,30,55,max = 255)
#clineas<-rgb(230,230,255,max = 255)
c1<-alpha("white",0.8)
par(bg=cfondo, oma=c(0,0,0,0), mar=c(0,0,2,0),adj=0)
plot(st_geometry(agua$osm_polygons),col=cfondo,
main="MAR MENOR (MURCIA) ",
family="sans",font=1,
col.main=clineas, cex.main=1.5)
plot(st_geometry(chs),add=T, lwd=0.1,lty=1,col=clineas)
plot(rios1, add=T, lwd=0.5,col=cfondo)
buffer<-st_buffer(chs,0.003)
#buffer<-st_buffer(dato2$osm_lines,0.003)
plot(st_cast(st_union(buffer),"MULTILINESTRING"),add=T,lwd=0.1,col=c1)
buffer<-st_buffer(chs,0.001)
#    buffer<-st_buffer(dato2$osm_lines,0.001)
#plot(st_geometry(st_union(buffer)),add=T,lty=1,col="blue",bg="blank")
plot(st_cast(st_union(buffer),"MULTILINESTRING"),add=T,lwd=0.2,col=c1)
#aguas
plot(st_geometry(agua$osm_polygons),add=T,lty="blank",col=cfondo)
# costa
plot(st_geometry(costa$osm_lines), add=T, lwd=0.1,col=clineas)
#plot(st_geometry(dato2$osm_polygons), add=T, lwd=0.2,col="red")
#plot(caja_zona,add=T)
plot(st_geometry(carr_secun), add=T, lwd=0.5,col=c1)
plot(autovia, add=T, lwd=1,col=c1)
#plot(st_geometry(calles$osm_lines), add=T, lwd=1, col= "#FFFFFF80")
plot(calles$osm_lines, add=T, lwd=0.2, col= c1)
pdf("plot_MarMenor.pdf", width=3.5, height=5)
cfondo<-"sandybrown" # rgb(255,245,245,max = 255)
clineas<-rgb(15,30,55,max = 255)
#cfondo<-rgb(15,30,55,max = 255)
#clineas<-rgb(230,230,255,max = 255)
c1<-alpha("white",0.8)
par(bg=cfondo, oma=c(0,0,0,0), mar=c(0,0,2,0),adj=0)
plot(st_geometry(agua$osm_polygons),col=cfondo,
main="MAR MENOR (MURCIA) ",
family="sans",font=1,
col.main=clineas, cex.main=1.5)
plot(st_geometry(chs),add=T, lwd=0.1,lty=1,col=clineas)
plot(rios1, add=T, lwd=0.5,col=cfondo)
buffer<-st_buffer(chs,0.003)
#buffer<-st_buffer(dato2$osm_lines,0.003)
plot(st_cast(st_union(buffer),"MULTILINESTRING"),add=T,lwd=0.1,col=c1)
buffer<-st_buffer(chs,0.001)
plot(st_cast(st_union(buffer),"MULTILINESTRING"),add=T,lwd=0.2,col=c1)
#aguas
plot(st_geometry(agua$osm_polygons),add=T,lty="blank",col=cfondo)
plot(st_geometry(costa$osm_lines), add=T, lwd=0.1,col=clineas)# costa
plot(st_geometry(carr_secun), add=T, lwd=0.5,col=c1)# carreteras secundarias
plot(autovia, add=T, lwd=1,col=c1) # autovía
plot(calles$osm_lines, add=T, lwd=0.2, col= c1) # calles
#text(-0.86,37.85, cex=2.2,"Mar Menor",col="white")
dev.off()
blogdown:::serve_site()
blogdown:::serve_site()
walk(rios, print)
library(tidyverse)
walk(rios, print)
#knitr::kable(head(rios,5),"html")
walk(head(rios), print)
#knitr::kable(head(rios,5),"html")
walk(rios, head)
#knitr::kable(head(rios,5),"html")
walk(rios)
str(rios)
blogdown:::serve_site()
blogdown:::new_post_addin()
getwd()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
ruta<-"static/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
ruta<-"/static/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
ruta<-"../static/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
ruta<-"/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
ruta<-"/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
imagenes<-list.files(ruta, pattern = ".jpg", full.names = TRUE )
imagenes
ruta<-"static/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
ruta<-"/static/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
ruta<-"../static/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
getwd
getwd()
ruta<-"C:/R/publicaciones/enrdados/static/img/vis_art/"
imagenes_n<-list.files(ruta, pattern = ".jpg", full.names = FALSE )
imagenes_n
imagenes<-list.files(ruta, pattern = ".jpg", full.names = TRUE )
imagenes
blogdown:::serve_site()
library(captioner)
blogdown:::serve_site()
# Ejecutamos el modelo en la imagen
x <- image_darknet_detect(
file = imagen,
object = yolo_tiny_voc,
threshold = 0.1)
# cargamos la libreria
library(image.darknet)
# Definimos el modelo de deteccion de objetos, los pesos y las etiquetas a buscar
yolo_tiny_voc <- image_darknet_model(
type = "detect",
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet", "data", "voc.names")
)
# seleccionamos una imagen
imagen<-"img/chico_nieve.jpg"
# Ejecutamos el modelo en la imagen
x <- image_darknet_detect(
file = imagen,
object = yolo_tiny_voc,
threshold = 0.36)
# seleccionamos una imagen
imagen<-"chico_nieve.jpg"
# Ejecutamos el modelo en la imagen
x <- image_darknet_detect(
file = imagen,
object = yolo_tiny_voc,
threshold = 0.36)
getwd()
imagen<-"C:/R/proyectos/series_temporales_R/img/2889889110_db7942228d_o.jpg"
# Ejecutamos el modelo en la imagen
x <- image_darknet_detect(
file = imagen,
object = yolo_tiny_voc,
threshold = 0.36)
# Ejecutamos el modelo en la imagen
x <- image_darknet_detect(
file = imagen,
object = yolo_tiny_voc,
threshold = 0.1)
faces
imagen <- system.file(package="image.libfacedetection", "images", "handshake.jpg")
imagen
x <- image_read(imagen)
# cargamos magick  y la libreria de deteccion de caras
library(magick)
library("image.libfacedetection")
x <- image_read(imagen)
faces <- image_detect_faces(x)
faces
plot(faces, x, border = "red", lwd = 4, col = "white")
kable(faces)
knitr::kable(faces)
knitr::kable(faces$detections)
## Extraer las caras detectadas
boxcontent <- lapply(seq_len(faces$nr), FUN=function(i){
face <- faces$detections[i, ]
image_crop(x, geometry_area(x = face$x, y = face$y,
width = face$width, height = face$height))
})
boxcontent <- do.call(c, boxcontent)
boxcontent
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
icon::fa('running', size = 1)
blogdown:::serve_site()
blogdown:::serve_site()
library(leaflet)
library(leaflet)
leaflet() %>% addTiles() %>% setView(-1, 42.0, zoom = 17)
leaflet() %>% addTiles() %>% setView(-1.1, 41.1, zoom = 14)
leaflet() %>% addTiles() %>% setView(-1.16, 37.7, zoom = 14)
leaflet() %>% addTiles() %>% setView(-1.16, 37.94, zoom = 14)
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
library("blogdown", lib.loc="~/R/R-3.5.2/library")
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
library(crosstalk)
install.packages("d3scatter")
devtools::install_github("jcheng5/d3scatter")
library(crosstalk)
datos_compartidos <- SharedData$new(mtcars)
# creamos un filtro de los datos
filter_slider("hp", "Horsepower", datos_compartidos, ~hp, width = "100%")
d3scatter(datos_compartidos, ~wt, ~mpg, ~factor(cyl), width="100%", height=250)
library(crosstalk)
datos_compartidos <- SharedData$new(mtcars)
# creamos un filtro de los datos
filter_slider("hp", "Horsepower", datos_compartidos, ~hp, width = "100%")
d3scatter(datos_compartidos, ~wt, ~mpg, ~factor(cyl), width="100%", height=250)
library(d3scatter)
datos_compartidos <- SharedData$new(mtcars)
d3scatter(datos_compartidos, ~wt, ~mpg, ~factor(cyl), width="100%", height=250)
blogdown:::serve_site()
# creamos los datos compartidos del dataframe ejemplo iris (flores)
c_iris <- SharedData$new(iris)
# creamos contenedor para 2 gráficas
bscols(
# grafica1
d3scatter(c_iris, ~Petal.Length, ~Petal.Width, ~Species, width="100%", height=300),
# grafica 2
d3scatter(c_iris, ~Sepal.Length, ~Sepal.Width, ~Species, width="100%", height=300)
)
# creamos los datos compartidos del dataframe ejemplo iris (flores)
c_iris <- SharedData$new(iris)
# creamos contenedor para 2 gráficas
bscols(
d3scatter(c_iris, ~Petal.Length, ~Petal.Width, ~Species, width="100%", height=200),
d3scatter(c_iris, ~Sepal.Length, ~Sepal.Width, ~Species, width="100%", height=200)
)
library(crosstalk)
# creamos los datos compartidos del dataframe ejemplo iris (flores)
c_iris <- SharedData$new(iris)
# creamos contenedor para 2 gráficas
bscols(
d3scatter(c_iris, ~Petal.Length, ~Petal.Width, ~Species, width="100%", height=200),
d3scatter(c_iris, ~Sepal.Length, ~Sepal.Width, ~Species, width="100%", height=200)
)
d3scatter(c_iris, ~Petal.Length, ~Petal.Width, ~Species, width="100%", height=200)
library(crosstalk)
# creamos los datos compartidos del dataframe ejemplo iris (flores)
c_iris <- SharedData$new(iris)
# creamos contenedor para 2 gráficas
bscols(
d3scatter(datos_compartidos, ~wt, ~mpg, ~factor(cyl), width="90%", height=250),
d3scatter(datos_compartidos, ~cyl , ~mpg, ~factor(cyl), width="90%", height=250)
)
datos_compartidos
head(mtcars)
# Usando los mismos gráficos datos de antes
# creamos contenedor para 2 gráficas
bscols(
d3scatter(datos_compartidos, ~wt, ~mpg, ~factor(cyl), width="90%", height=250),
d3scatter(datos_compartidos, ~gear , ~disp, ~factor(cyl), width="90%", height=250)
)
head(mtcars)
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# creamos una caja con 2 columnas, una para los filtros
# y otra para la gráfica
# en la primera col, habrá 3 htmlwidgets de filtro que metemos como lista
bscols(widths = c(3,NA),
list(
filter_checkbox("cyl", "Cilindros", datos_compartidos, ~cyl, inline = TRUE),
filter_slider("hp", "Potencia", datos_compartidos, ~hp, width = "100%"),
filter_radio("auto", "Automatico", datos_compartidos, ~ifelse(am == 0, "Yes", "No"))
),
d3scatter(datos_compartidos, ~wt, ~mpg, ~factor(cyl), width="100%", height=200)
)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
install.packages(c("RcppArmadillo", "RcppEigen"))
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("zoo")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::kable(mtcars[1:5,, 1:5], caption = "A table caption")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("yaml")
blogdown:::serve_site()
hist(rnorm(125), color="red")
hist(rnorm(125), col="red")
list.files(ruta, pattern = "*[:digit:].jpg", full.names = TRUE )
install.packages("rmarkdown")
install.packages("bookdown")
install.packages("blogdown")
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
install.packages("sf")
install.packages("GENLIB")
install.packages(c("ggspatial", "maptools", "OpenStreetMap", "prettymapr", "rosm"))
install.packages("extrafont")
install.packages(c("DiagrammeR", "tidyverse"))
install.packages("kableExtra")
install.packages(c("pryr", "rworldmap"))
install.packages("networkD3")
install.packages("osmdata")
install.packages("DT")
install.packages("xaringan")
install.packages(c("dygraphs", "plotly"))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
obra<-data.frame(
id=c(1:10),
name=c("1.Derribos","2.ayudas.Albañil","3.Albañilería","4.Instalaciones","5.Revestimientos","6.Pladur", "7.Carpintería","8.Equipamiento", "9.Pintura", "10.Limpieza"),
duration=c(4,2,25,12,5,7,3,6,3,2),
pred=c("","1","1,2","1,2","4","3,4,5","6","4,5","6,7,8","6,7,8,9")
)
knitr::kable(obra, caption = "Actividades obra")
knitr::kable(obra[,-1], caption = "Actividades obra")
names(obra)
aux<-names(obra)
names(obra)<-c("Actividad","Duracion","Predecesor")
knitr::kable(obra[,-1], caption = "Actividades obra")
names(obra)<-c("id","Actividad","Duracion","Predecesor")
knitr::kable(obra[,-1], caption = "Actividades obra")
obra<-data.frame(
id=c(1:11),
name=c("1.Derribos","2.Ayudas-Instal","3.Albañilería","4.Instalaciones","5.Revestimientos","6.Pladur", "7.Carpintería","8.Equipamiento", "9.Pintura", "10.Limpieza","11.D.O"),
duration=c(4,2,25,12,5,7,3,6,3,2,40),
pred=c("","1","1,2","1,2","4","3,4,5","6","4,5","6,7,8","6,7,8,9","")
)
aux<-names(obra)
names(obra)<-c("id","Actividad","Duracion","Predecesor")
knitr::kable(obra[,-1], caption = "Actividades obra")
names(obra)<-aux
knitr::kable(obra[,-1], caption = "Actividades obra")
# cargamos datos de la obra, como data.frame en la variable obra
obra<-data.frame(
id=c(1:10),
name=c("1.Derribos","2.ayudas.Albañil","3.Albañilería","4.Instalaciones","5.Revestimientos","6.Pladur", "7.Carpintería","8.Equipamiento", "9.Pintura", "10.Limpieza"),
duration=c(4,2,25,12,5,7,3,6,3,2),
pred=c("","1","1,2","1,2","4","3,4,5","6","4,5","6,7,8","6,7,8,9")
)
# Creamos un diagrama de red usando los datos
network_diagram(obra)
library(projmanr)
# Creamos un diagrama de red usando los datos
network_diagram(obra)
# Calculamos el camino crítico y pintamos el diagrama de nuevo
cam_critico <- critical_path(obra)
# volvemos a pintar
network_diagram(res,use_name_as_label = T)
# volvemos a pintar
network_diagram(cam_critico,use_name_as_label = T)
cam_critico
critical_path(obra, gantt = T)
install.packages("glue")
install.packages("glue")
critical_path(obra, gantt = T)
cam_critico
gantt(cam_critico)
cam_critico
# Calculamos el camino crítico y pintamos el diagrama de nuevo
cam_critico <- critical_path(obra, start_date="2020-06-10")
gantt(cam_critico)
critical_path(obra, gantt = T)
data <- taskdata1
# Create a gantt chart using the raw data
gantt(data)
data
res <- critical_path(data)
# Create a gantt chart using the raw data
gantt(res)
# Calculamos el camino crítico y pintamos el diagrama de nuevo
cam_critico <- critical_path(obra, start_date="2020-06-10")
# volvemos a pintar
network_diagram(cam_critico,use_name_as_label = T)
cam_critico
# Creamos un diagrama de red usando los datos
network_diagram(obra)
# volvemos a pintar
#  network_diagram(cam_critico,use_name_as_label = T)
network_diagram(cam_critico,use_name_as_label = F)
datatable(cam_critico,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE
))
#  knitr::kable(obra[,-1], caption = "Actividades obra")
#Vemos los datos
library(DT)
datatable(cam_critico,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE
))
cam_critico
str(cam_critico)
datatable(cam_critico$results,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE
))
datatable(cam_critico$results,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE, search=FALSE
))
datatable(cam_critico$results,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE, rownames = FALSE
))
datatable(cam_critico$results,class = 'cell-border stripe', rownames = FALSE,options = list(
pageLength = 5, autoWidth = TRUE,
))
datatable(cam_critico$results,class = 'cell-border stripe',container = 'sketch',options = list(
pageLength = 5, autoWidth = TRUE,
))
datatable(cam_critico$results,container = 'sketch',options = list(
pageLength = 5, autoWidth = TRUE,
))
datatable(cam_critico$results,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE,
))
datatable(cam_critico$results,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE
))
datatable(cam_critico$results,class = 'cell-border stripe',container = sketch,options = list(
pageLength = 5, autoWidth = TRUE
))
datatable(cam_critico$results,class = 'cell-border stripe',container = 'sketch',options = list(
pageLength = 5, autoWidth = TRUE
))
datatable(cam_critico$results,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE
))
df<-res$results
names(df)<-c("id","content","start","end","duration" , "is_critical", "pred_id")
#df$content<-obra$name
df$style<- ifelse(df$is_critical,"color: black;background:red","color: blue")
timevis(df)
library(timevis)
timevis(df)
df
datatable(cam_critico$results,class = 'cell-border stripe',options = list(
pageLength = 5, autoWidth = TRUE
))
df<-cam_critico$results
names(df)<-c("id","content","start","end","duration" , "is_critical", "pred_id")
#df$content<-obra$name
df$style<- ifelse(df$is_critical,"color: black;background:red","color: blue")
timevis(df)
blogdown:::serve_site()
# Cargamod el paquete
library(projmanr)
# Creamos un diagrama de red usando los datos
network_diagram(obra)
# Calculamos el camino crítico y pintamos el diagrama de nuevo
cam_critico <- critical_path(obra, start_date="2020-06-10")
# volvemos a pintar
#  network_diagram(cam_critico,use_name_as_label = T)
network_diagram(cam_critico,use_name_as_label = F)
# cargamos datos de la obra, como data.frame en la variable obra
obra<-data.frame(
id=c(1:10),
name=c("1.Derribos","2.ayudas.Albañil","3.Albañilería","4.Instalaciones","5.Revestimientos","6.Pladur", "7.Carpintería","8.Equipamiento", "9.Pintura", "10.Limpieza"),
duration=c(4,2,25,12,5,7,3,6,3,2),
pred=c("","1","1,2","1,2","4","3,4,5","6","4,5","6,7,8","6,7,8,9")
)
# Cargamod el paquete
library(projmanr)
# Creamos un diagrama de red usando los datos
network_diagram(obra)
# Calculamos el camino crítico y pintamos el diagrama de nuevo
cam_critico <- critical_path(obra, start_date="2020-06-10")
# volvemos a pintar
#  network_diagram(cam_critico,use_name_as_label = T)
network_diagram(cam_critico,use_name_as_label = F)
blogdown:::serve_site()
# Pintamos el diagramam de Gantt dinámico
timevis(df)
blogdown:::insert_image_addin()
blogdown:::serve_site()
