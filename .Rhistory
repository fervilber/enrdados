weeknames.size = 2)
calendR(#year = 2021,
start_date = ini, # Custom start date
end_date = fin,
start = "M",
subtitle = "Dias de lluvia",
#special.days = "weekend",
special.days = y, # Vector of the same length as the number of days of the year
gradient = TRUE,      # Set gradient = TRUE to create the heatmap
special.col = rgb(0, 0, 1, alpha = 0.3), # Color of the gradient for the highest value
low.col = "white",
# Color and size of the week names
#weeknames.col = "white",
weeknames.size = 2,
months.size=4)
calendR(#year = 2021,
start_date = ini, # Custom start date
end_date = fin,
start = "M",
subtitle = "Dias de lluvia",
#special.days = "weekend",
special.days = y, # Vector of the same length as the number of days of the year
gradient = TRUE,      # Set gradient = TRUE to create the heatmap
special.col = rgb(0, 0, 1, alpha = 0.3), # Color of the gradient for the highest value
low.col = "white",
# Color and size of the week names
#weeknames.col = "white",
weeknames.size = 4,
months.size=8)
lluviaDiaria<-xts(y,order.by=x)
# serie de lluvias con poisson y norm
y<-rpois(length(x), lambda = .1)*rnorm(length(x),mean = 30, sd = 18)
lluviaDiaria<-xts(y,order.by=x)
plot.zoo(lluviaDiaria)
autoplot(lluviaDiaria)
autoplot(lluviaDiaria)+cowplot(8)
autoplot(lluviaDiaria)
calendR(#year = 2021,
start_date = ini, # Custom start date
end_date = fin,
start = "M",
subtitle = "Dias de lluvia",
special.days = y,
gradient = TRUE,
special.col = rgb(0, 0, 1, alpha = 0.3),
low.col = "white",
weeknames.size = 4,
months.size=8)
n=400
s5<-ifelse(rnorm(n)>0.55,1,0)
image(matrix(s5,20,20),
col=gray.colors(2),axes = F, asp=1/1)
#par(mar=rep(0, 4), xpd = NA)
#png('qrtest.png', width=800, height=800)
#plot(rc)
image(matrix(ifelse(rgamma(n, shape = 1)>0.5,1,0),20,20),
col=c("white","darkred"),axes = FALSE, asp=1/1)
s5<-ifelse(rgamma(n, shape = 1)>0.5,1,0)
s6<-cumsum(s5)
plot(s6)
s6<-cumsum(rnorm(n))
plot(s6)
plot(s6,type="l")
image(matrix(s6,20,20),
col=c("white","darkred"),axes = FALSE, asp=1/1)
image(matrix(s6,20,20),
col=c(1:10),axes = FALSE, asp=1/1)
pal <- colorRampPalette(c(rgb(0.96,0.96,1), rgb(0.1,0.1,0.9)), space = "rgb")
image(matrix(s6,20,20),
col=pal,axes = FALSE, asp=1/1)
pal <- colorRampPalette(c(rgb(0.96,0.96,1), rgb(0.1,0.1,0.9)), space = "rgb")
image(matrix(s6,20,20),
col=pal,axes = FALSE, asp=1/1)
image(matrix(s6,20,20),
col=grey(seq(0, 1, length = 256)),axes = FALSE, asp=1/1)
#par(mar=rep(0, 4), xpd = NA)
#png('qrtest.png', width=800, height=800)
#plot(rc)
set.seed(8)
image(matrix(s5,20,20),
col=c("white","darkred"),axes = FALSE, asp=1/1)
#par(mar=rep(0, 4), xpd = NA)
#png('qrtest.png', width=800, height=800)
#plot(rc)
set.seed(198)
image(matrix(s5,20,20),
col=c("white","darkred"),axes = FALSE, asp=1/1)
#par(mar=rep(0, 4), xpd = NA)
#png('qrtest.png', width=800, height=800)
#plot(rc)
set.seed(198)
image(matrix(s5,20,20),
col=c("white","darkred"),axes = FALSE, asp=1/1)
set.seed(198)
n=400
#s5<-ifelse(rnorm(n)>0.55,1,0)
s5<-ifelse(rgamma(n, shape = 1)>0.5,1,0)
image(matrix(s5,20,20),
col=gray.colors(2),axes = F, asp=1/1)
set.seed(8)
n=400
#s5<-ifelse(rnorm(n)>0.55,1,0)
s5<-ifelse(rgamma(n, shape = 1)>0.5,1,0)
image(matrix(s5,20,20),
col=gray.colors(2),axes = F, asp=1/1)
set.seed(8888)
n=400
#s5<-ifelse(rnorm(n)>0.55,1,0)
s5<-ifelse(rgamma(n, shape = 1)>0.5,1,0)
image(matrix(s5,20,20),
col=gray.colors(2),axes = F, asp=1/1)
image(matrix(s5,20,20),
col=gray.colors(2),axes = F, asp=1/1)
image(matrix(s5,20,20),
col=c("white","darkred"),axes = FALSE, asp=1/1)
set.seed(7777)
#s5<-ifelse(rnorm(n)>0.55,1,0)
s5<-ifelse(rgamma(n, shape = 1)>0.5,1,0)
image(matrix(s5,20,20),
col=gray.colors(2),axes = F, asp=1/1)
image(matrix(s5,20,20),
col=c("white","darkred"),axes = FALSE, asp=1/1)
s6<-cumsum(rnorm(n))
plot(s6,type="l")
image(matrix(s6,20,20),
col=c(1:10),axes = FALSE, asp=1/1)
image(matrix(s6,20,20),
col=grey(seq(0, 1, length = 256)),axes = FALSE, asp=1/1)
image(matrix(s6,20,20),
col=c(1:10),axes = FALSE, asp=1/1)
image(matrix(s6,20,20),
col=grey(seq(0, 1, length = 256)),axes = FALSE, asp=1/1)
plot(s6,type="l", main="camino aleatorio")
plot(s6,type="l", main="Camino aleatorio",xlab="")
image(matrix(s6,20,20),
col=c(1:10),axes = FALSE, asp=1/1)
n=400  # nume de elementos de la serie
# serie normal
s_normal<-rnorm(n, mean = 0, sd = 3)
r <- raster(nrow=20, ncol=20)
values(r) <- s_normal#1:ncell(r)
plot(r)
r <- raster(nrow=20, ncol=20)
library(raster)
r <- raster(nrow=20, ncol=20)
values(r) <- s_normal#1:ncell(r)
plot(r)
# usamos la funion arima.sim de Rbase para generar
# ruido blanco
plot(arima.sim(model=list(order=c(0,0,0)),n=100))
# usamos la funion arima.sim de Rbase para generar
# ruido blanco
plot(arima.sim(model=list(order=c(0,0,0)),n=100),ylab="", main="Ruido blanco")
# Camino aleatorio order=c(0,1,0)
plot(arima.sim(model=list(order=c(0,1,0)),n=100),ylab="", main="Camino aleatorio")
# añadimos fecha como x
y<-arima.sim(model=list(order=c(0,1,0)),n=47)
ini=as.Date("1/06/2000", format="%d/%m/%Y")
x<-seq(ini, by="year",length.out=48)
plot(x,y,type="l")
set.seed(9)
# usamos la funion arima.sim de Rbase para generar
# Ruido blanco order=c(0,0,0)
plot(arima.sim(model=list(order=c(0,0,0)),n=100),ylab="", main="Ruido blanco")
# Camino aleatorio order=c(0,1,0)
plot(arima.sim(model=list(order=c(0,1,0)),n=100),ylab="", main="Camino aleatorio")
set.seed(19)
# usamos la funion arima.sim de Rbase para generar
# Ruido blanco order=c(0,0,0)
plot(arima.sim(model=list(order=c(0,0,0)),n=100),ylab="", main="Ruido blanco")
# Camino aleatorio order=c(0,1,0)
plot(arima.sim(model=list(order=c(0,1,0)),n=100),ylab="", main="Camino aleatorio")
set.seed(555)
# usamos la funion arima.sim de Rbase para generar
# Ruido blanco order=c(0,0,0)
plot(arima.sim(model=list(order=c(0,0,0)),n=100),ylab="", main="Ruido blanco")
# Camino aleatorio order=c(0,1,0)
plot(arima.sim(model=list(order=c(0,1,0)),n=100),ylab="", main="Camino aleatorio")
# añadimos fecha como x
y<-arima.sim(model=list(order=c(0,1,0)),n=47)
ini=as.Date("1/06/2000", format="%d/%m/%Y")
x<-seq(ini, by="year",length.out=48)
plot(x,y,type="l")
x<-seq(ini, by="months",length.out=48)
plot(x,y,type="l")
plot.zoo(x,y,type="l")
plot.ts(x,y,type="l")
plot(x,y,type="l")
plot(x,y,type="l",main="Serie camino aleatorio mensual", xlab="Fecha")
# Otros casos de ejemploi
n=1000 # numero de valores a generar
ini=as.Date("1/01/2010", format="%d/%m/%Y")
x<-seq(ini, by=1,len=n+1) # +1 por i=1 orden diff
y<-arima.sim(model=list(order=c(0,1,2),ma= c(0.8,-0.5)),n)
plot(x,y,type="l")
y<-100+arima.sim(model=list(order=c(0,1,2),ma= c(0.8,-0.5)),n)
plot(x,y,type="l",main="evolucion valor")
plot(x,y,type="l",main="evolucion valor A")
plot(x,y,type="l",main="evolucion valor A", xlab=NULL)
plot(x,y,type="l",main="evolucion valor A", xlab="")
plot(x,y,type="l",main="Evolucion valor A", xlab="")
# serie
plot(x,arima.sim(model=list(order=c(1,1,1),ar=c(0.8),ma= c(0.2)), n),type="l")
# serie
y<-500+arima.sim(model=list(order=c(1,1,1),ar=c(0.8),ma= c(0.2),n))
plot(x,y,type="l")
plot(x,y,type="l",main="Evolucion valor A",
xlab="", col="red")
# serie
y<-500+arima.sim(model=list(order=c(1,1,1),ar=c(0.8),ma= c(0.2),n))
plot(x,y,type="l")
y<-100+arima.sim(model=list(order=c(0,1,2),ma= c(2,-0.5)),n)
plot(x,y,type="l",main="Evolucion valor A",
xlab="", col="red")
set.seed(555)
# usamos la funion arima.sim de Rbase para generar
# Ruido blanco order=c(0,0,0)
plot(arima.sim(model=list(order=c(0,0,0)),n=100),ylab="", main="Ruido blanco")
# Camino aleatorio order=c(0,1,0)
plot(arima.sim(model=list(order=c(0,1,0)),n=100),ylab="", main="Camino aleatorio")
# añadimos fecha como x,en una serie mensual de valores
ini=as.Date("1/06/2000", format="%d/%m/%Y")
x<-seq(ini, by="months",length.out=48)
y<-arima.sim(model=list(order=c(0,1,0)),n=47)
plot(x,y,type="l",main="Serie camino aleatorio mensual", xlab="Fecha")
# Otros casos de ejemplo
n=1000 # numero de valores a generar
ini=as.Date("1/01/2010", format="%d/%m/%Y")
x<-seq(ini, by=1,len=n+1) # +1 por i=1 orden diff
y<-100+arima.sim(model=list(order=c(0,1,2),ma= c(2,-0.5)),n)
plot(x,y,type="l",main="Evolucion valor A",
xlab="", col="red")
autoplot.zoo(x~y)
autoplot.zoo(merge(x,y))
autoplot(xts(y,order.by=x))
# añadimos fecha como x,en una serie mensual de valores
ini=as.Date("1/06/2000", format="%d/%m/%Y")
x<-seq(ini, by="months",length.out=48)
y<-arima.sim(model=list(order=c(0,1,0)),n=47)
plot(x,y,type="l",main="Serie camino aleatorio mensual", xlab="Fecha")
y1<-xts(y,order.by=x)
# Otros casos de ejemplo
n=1000 # numero de valores a generar
ini=as.Date("1/01/2010", format="%d/%m/%Y")
x<-seq(ini, by=1,len=n+1) # +1 por i=1 orden diff
y<-100+arima.sim(model=list(order=c(0,1,2),ma= c(2,-0.5)),n)
plot(x,y,type="l",main="Evolucion valor A",
xlab="", col="red")
y2<-xts(y,order.by=x)
autoplot(merge(y1,y2))
autoplot(merge(y1,y2), facets = NULL)
# añadimos fecha como x,en una serie mensual de valores
ini=as.Date("1/06/2000", format="%d/%m/%Y")
x<-seq(ini, by="months",length.out=48)
y<-arima.sim(model=list(order=c(0,1,0)),n=47)
plot(x,y,type="l",main="Serie camino aleatorio mensual", xlab="Fecha")
y1<-xts(y,order.by=x)
# Otros casos de ejemplo
n=1000 # numero de valores a generar
ini=as.Date("1/01/2000", format="%d/%m/%Y")
x<-seq(ini, by=1,len=n+1) # +1 por i=1 orden diff
y<-100+arima.sim(model=list(order=c(0,1,2),ma= c(2,-0.5)),n)
plot(x,y,type="l",main="Evolucion valor A",
xlab="", col="red")
y2<-xts(y,order.by=x)
autoplot(merge(y1,y2), facets = NULL)
autoplot(cbind(y1,y2), facets = NULL)
cbind(y1,y2)
merge(y1,y2)
y2
y1
autoplot(merge.zoo(y1,y2), facets = NULL)
merge.zoo(y1,y2)
autoplot(merge.zoo(y1,y2), facets = NULL)
autoplot(merge.zoo(y1,y2))#, facets = NULL)
autoplot(merge.zoo(y1,to.period(y2, period = "months")))#, facets = NULL)
to.period(y2, period = "months")
autoplot(y1)
autoplot(y2)
autoplot(y1)+autolayer(y2)
autoplot(y1)+autolayer(y2, series="Data")
# añadimos fecha como x,en una serie mensual de valores
ini=as.Date("1/01/2000", format="%d/%m/%Y")
x<-seq(ini, by="months",length.out=48)
y<-arima.sim(model=list(order=c(0,1,0)),n=47)
plot(x,y,type="l",main="Serie camino aleatorio mensual", xlab="Fecha")
y1<-xts(y,order.by=x)
# Otros casos de ejemplo
n=1000 # numero de valores a generar
ini=as.Date("1/01/2000", format="%d/%m/%Y")
x<-seq(ini, by=1,len=n+1) # +1 por i=1 orden diff
y<-100+arima.sim(model=list(order=c(0,1,2),ma= c(2,-0.5)),n)
plot(x,y,type="l",main="Evolucion valor A",
xlab="", col="red")
y2<-xts(y,order.by=x)
autoplot(merge.zoo(y1,to.period(y2, period = "months")))#, facets = NULL)
autoplot(y1)+
autolayer(y2, series="Data")
autoplot(y1)+
autolayer(y2)
y3<-to.period(y2, period = "months"))
y3<-to.period(y2, period = "months")
autoplot(y1)+
autolayer(y3)
autoplot(y1)
autoplot(y3)
autoplot(y1)+
autolayer(y3[1])
autoplot(y3[1])#+
autoplot(y3[,1])#+
autoplot(y3[,1])+
autolayer(y1])
autoplot(y1)+
autolayer(y3[,1])
autoplot(merge(y1,y3[,1]))
autoplot(merge(y1,y3[,1], facets = NULL))
autoplot(merge(y1,y3[,1], facets = NULL))
plot(merge(y1,y3[,1], facets = NULL))
addlines(y3[,1])
plot(y1)
addlines(y3[,1])
plot(y1)
lines(y3[,1])
plot(y1)+
lines(y3[,1])
y2<-xts(y,order.by=x)
plot(x,y,type="l",main="Evolucion valor A",
xlab="", col="red")
plot.zoo(y2)
set.seed(888)
# ejemplo de serie con objeto ts
n=48 # meses
x<-cumsum(rnorm(n))
serie1<-ts(x,start = c(2010,3),frequency=12)
plot(serie1,main="Serie 1. ts", col="blue")
# Ejemplo de serie con objeto xts
library(xts)
n=48 # meses
x1<-cumsum(rgamma(n, shape = 1)*sample(c(-1,1),n,replace = T))
f_ini=as.Date("4/02/2014", format="%d/%m/%Y")
y<-seq(f_ini, by="month",len=n)
serie2<-xts(x1,order.by=y)
plot.zoo(serie2, main="Serie 2. xts", col="red")
set.seed(888)
# ejemplo de serie con objeto ts
n=48 # meses
x<-cumsum(rnorm(n))
serie1<-ts(x,start = c(2010,3),frequency=12)
plot(serie1,main="Serie 1. ts", col="blue")
# Ejemplo de serie con objeto xts
library(xts)
n=48 # meses
x1<-cumsum(rgamma(n, shape = 1)*sample(c(-1,1),n,replace = T))
f_ini=as.Date("4/02/2014", format="%d/%m/%Y")
y<-seq(f_ini, by="month",len=n)
serie2<-xts(x1,order.by=y)
plot.zoo(serie2, main="Serie 2. xts", col="red")
n=100 # numencuestados
# creamos 3 series una para cada pregunta de la encuesta
# Pregunta A: Si/NO con 20% de SI
A<-ifelse(runif(n)>0.8,"SI","NO") # 1=si
A<-as.factor(A) # lo convertimos a factor
# creamos la tabla con la primera col
tabla_encuesta<-data.frame(A)
# Pregunta B: 3 respuestas posibles 3 prob
# usando sample para asignar prob a cada respuesta posible
B<-sample(c("a","b","c"),size=100,replace = T,prob=c(0.6,0.3,0.1))
#    # creamos una funcion para las respuestas:
#    # OJO: Ver opción simplificada en el siguiente script
#    encuesta2<-function(x,pa=0.9,pb=0.6){
#        # 3 posibles respuestas con p1= 0,6 p2=0,3  p3=0,1
#        # deben sumar 1
#        if (x>pa) return("c")
#        else if (x>pb ) return("b")
#        else return("a")
#        }
#    # generamos 100
#    v <- runif(n)
#    tabla_encuesta$B<-as.factor(sapply(v,encuesta2))
# Pregunta C: valoracion de 0 a 10. entero
C<-round(rnorm(n,6,2))
C<-ifelse(C>10,10,C) # comprobamos que no sea > de 10
# Añadimos la ultima respuesta
tabla_encuesta$C<-C
head(tabla_encuesta,10)
str(tabla_encuesta)
#summary(tabla_encuesta)
barplot(table(tabla_encuesta$A))
barplot(table(tabla_encuesta$B))
barplot(table(tabla_encuesta$C))
p<-ggplot(data=tabla_encuesta, aes( y=A)) +
geom_bar(stat="identity")
p
table(tabla_encuesta$A)
names(tabla_encuesta)
# Pregunta B: 3 respuestas posibles 3 prob
# usando sample para asignar prob a cada respuesta posible
B<-sample(c("a","b","c"),size=100,replace = T,prob=c(0.6,0.3,0.1))
tabla_encuesta$B<-B
head(tabla_encuesta,10)
rownames(tabla_encuesta)
t_encuesta<-melt(tabla_encuesta ,  id.vars = rownames(tabla_encuesta), variable.name = 'series')
t_encuesta
t_encuesta<-melt(tabla_encuesta ,  id.vars = rownames(tabla_encuesta), variable.name = 'series')
tabla_encuesta$id<-rownames(tabla_encuesta)
head(tabla_encuesta,10)
t_encuesta<-melt(tabla_encuesta ,  id.vars = 'id', variable.name = 'series')
t_encuesta
n=100 # numencuestados
# creamos 3 series una para cada pregunta de la encuesta
# Pregunta A: Si/NO con 20% de SI
A<-ifelse(runif(n)>0.8,"SI","NO") # 1=si
A<-as.factor(A) # lo convertimos a factor
# creamos la tabla con la primera col
tabla_encuesta<-data.frame(A)
# Pregunta B: 3 respuestas posibles 3 prob
# usando sample para asignar prob a cada respuesta posible
B<-sample(c("a","b","c"),size=100,replace = T,prob=c(0.6,0.3,0.1))
tabla_encuesta$B<-as.factor(B)
# Pregunta C: valoracion de 0 a 10. entero
C<-round(rnorm(n,6,2))
C<-ifelse(C>10,10,C) # comprobamos que no sea > de 10
# Añadimos la ultima respuesta
tabla_encuesta$C<-as.factor(C)
tabla_encuesta$id<-rownames(tabla_encuesta)
head(tabla_encuesta,10)
t_encuesta<-melt(tabla_encuesta ,  id.vars = 'id', variable.name = 'series')
t_encuesta
p<-ggplot(data=t_encuesta, aes(x=id y=series)) +
geom_bar(stat="identity")
p
p<-ggplot(data=t_encuesta, aes(x=id, y=series)) +
geom_bar(stat="identity")
p
p<-ggplot(data=t_encuesta, aes(x=value, fill=series)) +
geom_bar(stat="identity")
p
t_encuesta
p<-ggplot(data=t_encuesta, aes(x=value, y=series,fill=series)) +
geom_bar(stat="identity")
p
p<-ggplot(data=t_encuesta, aes(x=value, y=series,fill=series)) +
geom_bar(stat="identity")+
facet_wrap(vars(series))+
theme_cowplot(8)
p
head(tabla_encuesta,10)
ggplot(data=tabla_encuesta, aes(x=A, y=id)) +
geom_bar(stat="identity")+
theme_cowplot(8)
ggplot(data=tabla_encuesta, aes(x=A, y=id)) +
geom_col(stat="identity")+
theme_cowplot(8)
ggplot(data=tabla_encuesta, aes(x=A, y=id)) +
geom_col()+
theme_cowplot(8)
ggplot(data=tabla_encuesta, aes(x=A, y=id)) +
geom_col()+
theme_cowplot(8)
ggplot(data=tabla_encuesta, aes(x=A, y=id)) +
geom_col()
ggplot(data=tabla_encuesta, aes(x=A)) +
geom_col()
ggplot(data=tabla_encuesta, aes(x=A)) +
geom_bar()
ggplot(data=tabla_encuesta, aes(x=A)) +
geom_bar()+
theme_cowplot(8)
ggplot(data=tabla_encuesta, aes(x=A)) +
geom_bar(col=1:2)+
theme_cowplot(8)
ggplot(data=tabla_encuesta, aes(x=A)) +
geom_bar(aes(fill=A))+
theme_cowplot(8)
p2<-ggplot(data=tabla_encuesta, aes(x=B)) +
geom_bar(aes(fill=B))+
theme_cowplot(8)
p3<-ggplot(data=tabla_encuesta, aes(x=C)) +
geom_bar(aes(fill=C))+
theme_cowplot(8)
p2
p1+ p2 /p3
p1<-ggplot(data=tabla_encuesta, aes(x=A)) +
geom_bar(aes(fill=A))+
theme_cowplot(8)
p2<-ggplot(data=tabla_encuesta, aes(x=B)) +
geom_bar(aes(fill=B))+
theme_cowplot(8)
p3<-ggplot(data=tabla_encuesta, aes(x=C)) +
geom_bar(aes(fill=C))+
theme_cowplot(8)
p1+ p2 /p3
(p1 + p2) /p3
g_encuesta<-(p1 + p2) /p3
g_encuesta+ plot_annotation(tag_levels = 'A')
g_encuesta+ plot_annotation(tag_levels = 'A',tag_prefix = 'Pregunta. ')
p3<-ggplot(data=tabla_encuesta, aes(x=C)) +
geom_bar(aes(fill=C),show.legend = NA)+
theme_cowplot(8)
g_encuesta<-(p1 + p2) /p3
g_encuesta+ plot_annotation(tag_levels = 'A',tag_prefix = 'Pregunta. ')
p1<-ggplot(data=tabla_encuesta, aes(x=A)) +
geom_bar(aes(fill=A),show.legend = FALSE)+
theme_cowplot(8)
p2<-ggplot(data=tabla_encuesta, aes(x=B)) +
geom_bar(aes(fill=B),show.legend = FALSE)+
theme_cowplot(8)
p3<-ggplot(data=tabla_encuesta, aes(x=C)) +
geom_bar(aes(fill=C),show.legend = FALSE)+
theme_cowplot(8)
g_encuesta<-(p1 + p2) /p3
g_encuesta+ plot_annotation(tag_levels = 'A',tag_prefix = 'Pregunta. ')
