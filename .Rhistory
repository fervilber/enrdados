#  ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
#      geom_col(aes(fill=persona))
ggplot(dt_gastos) +aes(x=ingresos,fill=persona)+
geom_histogram()+geom_rug()
#  ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
#      geom_col(aes(fill=persona))
ggplot(dt_gastos) +aes(x=ingresos,fill=persona)+
labs(title = "Ingresos mensuales por persona")+
geom_histogram()+geom_rug()
map(1:3,~.x)
map(1:3,~rep(.x,4))
map(1:3,~rep(.x,.x))
map(1:3,~runf(.x))
# List of 1, 2 and 3
means <- map(1:3,~runif(.x))
means
# List of 1, 2 and 3
caudales <- map(c(5,10,25),~10*runif(.x))
caudales
# Muestras de caudal de tamaño diferente
muestra <- map(c(5,10,25),~10*runif(.x)+.x)
muestra
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,10,25),~.x)
n_rios
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,10,12),~.x)
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,10,12),~.x)
n_rios
# Localizaciones
cuenca <- list("Norte", "Este","Sur")
names(n_rios)
# Localizaciones
cuenca <- list(c("Norte", "Este","Sur"),c(200,1000,500))
cuenca
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,10,12),~.x)
# Localizaciones
cuenca <- list(c("Norte", "Este","Sur"),c(200,1000,500))
# Map over two arguments: sites and means
dt_caudales <- map2(cuenca,muestra, ~data.frame(poblacion = .x[[1]],
caudales = rnorm(mean = .x[[2]], n = .y, sd = 100)))
# Map over two arguments: sites and means
dt_caudales <- map2(cuenca,n_rios, ~data.frame(poblacion = .x[[1]],
caudales = rnorm(mean = .x[[2]], n = .y, sd = 100)))
n_rios
cuenca
# Map over two arguments: sites and means
dt_caudales <- map2(cuenca,c(5,10,12), ~data.frame(poblacion = .x[[1]],
caudales = rnorm(mean = .x[[2]], n = .y, sd = 100)))
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,100,12),~.x)
n_rios
# Localizaciones
cuenca <- list("Norte", "Este","Sur")
cuenca
# Muestras de caudal de tamaño diferente
caudalaes_medios <- map(c(5,100,12),~.x)
# Map over two arguments: sites and means
dt_caudales <- map2(cuenca,caudalaes_medios, ~data.frame(cuenca = .x,
caudales = rnorm(mean = .y, n = 10, sd = .y/5)))
dt_caudales
bind_rows(dt_caudales)
bind_rows(dt_caudales)
ggplot(dt_caudales) +aes(x=cuenca,y=caudales, color=cuenca)+
labs(title = "Ingresos medios por persona")+
labs(subtitle = "a partir de los datos generados")+
labs(y = "ingreso medio al mes en €")+
geom_line()
# Map over two arguments: sites and means
l_caudales <- map2(cuenca,caudalaes_medios, ~data.frame(cuenca = .x,
caudales = rnorm(mean = .y, n = 10, sd = .y/5)))
# para unir las listas creadas en un solo dataframe usaremos dplyr
require(dplyr)
dt_caudales<-bind_rows(l_caudales)
ggplot(dt_caudales) +aes(x=cuenca,y=caudales, color=cuenca)+
labs(title = "Ingresos medios por persona")+
labs(subtitle = "a partir de los datos generados")+
labs(y = "ingreso medio al mes en €")+
geom_line()
ggplot(dt_caudales) +aes(x=cuenca,y=caudales, color=cuenca)+
labs(title = "Ingresos medios por persona")+
labs(subtitle = "a partir de los datos generados")+
labs(y = "ingreso medio al mes en €")+
geom_boxplot()
# Name gh_repos with the names of the repo owner
cuenca %>%
map_chr(~ .[[1]])
# Name gh_repos with the names of the repo owner
cuenca %>% map_chr(~ .[[1]]) %>%set_names(caudales_medios, .)
# Muestras de caudal de tamaño diferente
caudales_medios <- map(c(5,100,12),~.x)
caudales_medios
# Name gh_repos with the names of the repo owner
cuenca %>% map_chr(~ .[[1]]) %>% set_names(caudales_medios, .)
caudales_medios$Norte
#names(n_rios)<-c()
set_names(caudales_medios)<-cuenca
#names(n_rios)<-c()
set_names(caudales_medios,cuenca)
# Use map to iterate_
ficheros<- list.files(getwd())
ficheros
longletras<-map(ficheros,nchar)
# Output size of list object
print(longletras)
longletras<-map_int(ficheros,nchar)
longletras
# probamos como vector lógico
map_lgl(ficheros,nchar== 21)
# Use map to iterate_
ficheros<- list.files(getwd())
# probamos como vector lógico
map_lgl(ficheros,nchar== 21)
ficheros
# probamos como vector lógico
map_lgl(ficheros,nchar() == 21)
# probamos como vector lógico
map_lgl(ficheros,~nchar(.x) == 21)
# probamos como vector lógico
map_lgl(ficheros,~nchar(.x) == 5)
longletras
# probamos como vector lógico
map_lgl(ficheros,~nchar(.x) > 5)
# probamos como vector lógico
map_lgl(ficheros,~nchar(.x) > 9)
# probamos como vector lógico
map_lgl(ficheros,nchar > 9)
# probamos como vector lógico
map_lgl(longletras,nchar > 9)
map_dbl(10:20,~.x %>% as.character() %>% strsplit(""))
map_dbl(list(10:20),~.x %>% as.character() %>% strsplit(""))
map(10:20,~.x %>% as.character() %>% strsplit(""))
desc_num<-function(x){
x1<-as.character(x)
x2<-unlist(strsplit(x1,""))
x3<-sum(as.numeric(x2))
if(x3>10){
desc_num(x3)
} else{
x3}
}
desc_num(200)
map_dbl(1000:1200,~desc_num(.x))
desc_num(34560)
# ejecutamos la funcion en 100 numeros
map_dbl(1000:1200,~desc_num(.x))
dat<-data.frame(a=1:200,b=map_dbl(1:200,~desc_num(.x)))
dat
head(dat,20)
lapply(1:200,desc_num())
lapply(1:200,desc_num)
#con la lista sw_films
# Pull out the director element of sw_films in a list and character vector
map(sw_films, ~.x[["director"]])
map_chr(sw_films, ~.x[["director"]])
# Compare outputs when checking if director is George Lucas
map(sw_films, ~.x[["director"]] == "George Lucas")
map_lgl(sw_films, ~.x[["director"]] == "George Lucas")
# Pull out episode_id element as list
map(sw_films, ~.x[["episode_id"]])
# Pull out episode_id element as integer vector
map_int(sw_films, ~.x[["episode_id"]])
walk(sw_films)
#require(purrr)
require(tidyverse)
require(repurrrsive)
walk(sw_films)
walk(sw_films,print)
str(sw_films)
summary(sw_films)
summary(sw_films,show.data=2)
Num_element = lengths(sw_films)
Num_element
sw_films[[1]]
names(sw_films[[1]])
names(sw_films)
walk(sw_films[[1]],print)
#Vemos cuantos elementos tiene
lengths(sw_films)
length(sw_films)
# vemos cuantos elementos tiene cada elemento principal
lengths(sw_films)
summary(sw_films[[1]])
walk(sw_films[[1]],print)
walk(sw_films[[1]],summary)
# vemos uno de esos subelementos a ver que tiene
summary(sw_films[[1]])
head(walk(sw_films[[1]],print))
# vemos lo que contiene el primero
#walk(sw_films[[1]],print))
names(sw_films[[1]])
# vamos a hacer una data frame a partir de la lista
# primero extraemos la lista de títulos de las peliculas que están en el campo title
# despues creamos un nuevo campo y extraemos de cada pelicula los actores que han participado
sw_df <- data.frame(pelicula = map_chr(sw_films, ~.x$title)) %>%
mutate(pelicula, actor = map(sw_films, ~.x$characters))
sw_df
str(sw_df)
bind_rows(sw_df)
# vamos a hacer una data frame a partir de la lista
# primero extraemos la lista de títulos de las peliculas que están en el campo title
# despues creamos un nuevo campo y extraemos de cada pelicula los actores que han participado
sw_df <- data.frame(pelicula = map_chr(sw_films, ~.x$title)) %>%
mutate(pelicula, actor = map(sw_films, ~.x$characters))%>%
unnest()
sw_df
data.frame(pelicula = map_chr(sw_films, ~.x$title)) %>%
mutate(pelicula, actor = map(sw_films, ~.x$characters))
# vamos a hacer una data frame a partir de la lista
# primero extraemos la lista de títulos de las peliculas que están en el campo title
# despues creamos un nuevo campo y extraemos de cada pelicula los actores que han participado
sw_df <- data.frame(pelicula = map_chr(sw_films, ~.x$title)) %>%
mutate(pelicula, actor = map(sw_films, ~.x$characters))%>%
unnest()
# De la lista sw_people sacamos la correspondencia entre url y nombre del actor
sw_actores <- map_df(sw_people, `[`, c("name", "url"))
# juntamos las tablas
sw_dt<-inner_join(sw_df, sw_actores, by = c("actor" = "url"))
str(sw_dt)
# borramos la segunda columna, pues las url ya no nos valen
sw_dt<-sw_dt[-2]
#cambiamos de nombre
colnames(sw_dt)<-c("pelicula", "actor")
class(sw_dt)
str(sw_dt)
# ahora podemos sacar algunas gráficas
ggplot(sw_dt, aes(x = actor,fill = pelicula)) +
geom_histogram(stat = "count",alpha = 0.6)+
labs(x = 'actor', y = 'nº peliculas') +
labs(title='Actores en las peliculas de Star Wars')+
theme(axis.text.x = element_text(angle = 90, hjust = 1,size=6))
sw_dt %>% add_count(actor)
sw_dt%>% mutate(ntotal=add_count(actor))
mutate(sw_dt,ntotal=add_count(actor))
# añadimos una columna con el num de veces total que aparece cada
sw_dt %>% add_count(actor)
ggplot(sw_dt[sw_dt$n>2,], aes(x = actor,fill = pelicula)) +
geom_histogram(stat = "count",alpha = 0.6)+
labs(x = 'actor', y = 'nº peliculas') +
labs(title='Actores en las peliculas de Star Wars')+
theme(axis.text.x = element_text(angle = 90, hjust = 1,size=8))
sw_dt
# añadimos una columna con el num de veces total que aparece cada
sw_dt<-sw_dt %>% add_count(actor)
sw_dt
ggplot(sw_dt[sw_dt$n>2,], aes(x = actor,fill = pelicula)) +
geom_histogram(stat = "count",alpha = 0.6)+
labs(x = 'actor', y = 'nº peliculas') +
labs(title='Actores en las peliculas de Star Wars')+
theme(axis.text.x = element_text(angle = 90, hjust = 1,size=8))
# numero de actores por pelicula
ggplot(sw_dt, aes(x = pelicula,fill = pelicula)) +
geom_histogram(stat = "count",alpha = 0.6)+
labs(x = 'Película', y = 'nº actores') +
labs(title='nº de actores por pelicula de Star Wars')+
theme(legend.position = "none")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Turn data into correct dataframe format
film_by_character <- tibble(filmtitle = map_chr(sw_films, ~.x$title)) %>%
mutate(filmtitle, characters = map(sw_films, ~.x$characters)) %>%
unnest()
film_by_character
# Añadimos más información a la tabla sacando los datos físicos de los actores desde sw_people
str(sw_dt)
dt_fisicos <- map_df(sw_people, `[`, c("height", "mass", "name", "url"))
dt_fisicos
sw_people
head(dt_fisicos)
dt_fisicos <- map_df(sw_people, `[`, c("height", "mass","hair_color","birth_year","name"))
head(dt_fisicos)
# Join the two new objects
sw_dt1 <- inner_join(sw_dt, dt_fisicos, by = c("name" = "name"))
# Añadimos más información a la tabla sacando los datos físicos
# peso, altura, color de pelo, año nacimiento, nombre y url
#de los actores desde sw_people
str(sw_dt)
# Join the two new objects
sw_dt1 <- inner_join(sw_dt, dt_fisicos, by = c("actor" = "name"))
head(dt_fisicos)
dt_fisicos
head(sw_dt1)
# vemos que las columnas peso y altura son de texto, por lo que transformamos a numero
mutate(altura = as.numeric(height), peso = as.numeric(mass))
# vemos que las columnas peso y altura son de texto, por lo que transformamos a numero
sw_dt1 %>% mutate(altura = as.numeric(height), peso = as.numeric(mass))
xta<-aggregate(actor ~ pelicula, mass, count)
xta<-aggregate(actor ~ pelicula, peso, count)
xta<-aggregate(actor ~ pelicula, peso, count)
sw_dt1
xta<-aggregate(actor ~ pelicula, sw_dt1, count)
xta<-aggregate(peso ~ pelicula, sw_dt1, mean)
sw_dt1
# vemos que las columnas peso y altura son de texto, por lo que transformamos a numero
sw_dt1<-sw_dt1 %>% mutate(altura = as.numeric(height), peso = as.numeric(mass))
sw_dt1
xta<-aggregate(peso ~ pelicula, sw_dt1, mean)
xta
sw_dt1 %>% group_by(pelicula)%>% group_rows()
pesosxfilm<-sw_dt1 %>% group_by(pelicula)%>% group_rows()
sw_dt1
pesosxfilm<-sw_dt1 %>% group_by(pelicula)%>% group_rows()
pesosxfilm
pesosxfilm<-aggregate(peso ~ pelicula, sw_dt1, mean)
pesosxfilm
# Plot the heights, faceted by film title
ggplot(pesosxfilm, aes(x = peso, y=pelicula)) +
geom_histogram(stat = "count")
# Plot the heights, faceted by film title
ggplot(pesosxfilm, aes(x = peso, fill=pelicula)) +
geom_histogram(stat = "count")
sw_dt1
# Plot the heights, faceted by film title
ggplot(sw_dt1, aes(x = peso, fill=pelicula)) +
geom_histogram(stat = "count")
# Plot the heights, faceted by film title
ggplot(sw_dt1, aes(x = peso, fill=pelicula)) +
geom_histogram(stat = "count") +
facet_wrap(~ pelicula)
# Plot the heights, faceted by film title
ggplot(sw_dt1, aes(x = peso)) +
geom_histogram(stat = "count") +
facet_wrap(~ pelicula)
# numero de actores por película
sw_dt1 %>% group_by(pelicula) %>% tally()
# numero de actores por película
sw_dt1 %>% group_by(pelicula) %>% tally()
# peso de los actores en cada pelicula
pesosxfilm<-aggregate(peso ~ pelicula, sw_dt1, mean)
pesosxfilm
# Plot the heights, faceted by film title
ggplot(sw_dt1, aes(x = peso)) +
geom_histogram(stat = "count") +
facet_wrap(~ pelicula)
#añado las pelis en las que aparece cada actor
dt<-dt %>% add_count(actor) %>% filter(n>2)
#add_tally()
ggplot(dt, aes(x = actor,fill = peli)) +
geom_histogram(stat = "count",alpha = 0.6)+
labs(x = 'actor', y = 'nº peliculas') +
labs(title='Star Wars actores por pelicula')+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
blogdown:::serve_site()
ggplot(data = map_df(gh_users,~data_frame(
public_repos=.x[["public_repos"]],
followers= .x[["followers"]])),
aes(x = public_repos, y = followers))+
geom_col()
public_repos=.x[["public_repos"]],
followers= .x[["followers"]])),
aes(x = public_repos, y = followers))+
geom_point(aes(size=followers))
public_repos=.x[["public_repos"]],
followers= .x[["followers"]])),
aes(x = public_repos, y = followers,
size=followers))+
geom_point()
public_repos=.x[["public_repos"]],
followers= .x[["followers"]])),
aes(x = public_repos, y = followers,
size=followers))+
geom_point(mapping=aes(size = followers))
public_repos=.x[["public_repos"]],
followers= .x[["followers"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(size = followers))
ggplot(data = map_df(gh_users,~data_frame(
public_repos=.x[["public_repos"]],
followers= .x[["followers"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(size = followers))
map_df(gh_users,~data_frame(
public_repos=.x[["public_repos"]],
followers= .x[["followers"]]))
#  2. ¿Cuál de los usuarios tiene más repositorios públicos?
map_int(gh_users, ~.[["public_repos"]]) %>%
set_names(map_chr(gh_users, "name")) %>%
sort()
ggplot(data = map_df(gh_users,~data_frame(
public_repos=.x[["public_repos"]],
followers= .x[["followers"]],
nombre= .x[["name"]])),
aes(x = nombre, y = followers))+
geom_col(mapping=aes(fill = public_repos))
ggplot(data = map_df(gh_users,~data_frame(
public_repos=.x[["public_repos"]],
followers= .x[["followers"]],
nombre= .x[["name"]])),
aes(x = nombre, y = public_repos))+
geom_col(mapping=aes(fill = followers))
public_repos=.x[["public_repos"]],
followers= .x[["followers"]],
nombre= .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre))
ggplot(data = map_df(gh_users,~data_frame(
public_repos=.x[["public_repos"]],
followers= .x[["followers"]],
nombre= .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre))
ggplot(data = map_df(gh_users,~data_frame(
public_repos=.x[["public_repos"]],
followers= .x[["followers"]],
nombre= .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre, size=7))
ggplot(data = map_df(gh_users,~data_frame(
public_repos=.x[["public_repos"]],
followers= .x[["followers"]],
nombre= .x[["name"]])),
aes(x = public_repos, y = followers,size=7))+
geom_point(mapping=aes(color = nombre))
followers = .x[["followers"]],
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre)
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre))
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre))
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers,size=7))+
geom_point(mapping=aes(color = nombre))
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers,size=followers))+
geom_point(mapping=aes(color = nombre))
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers,size=followers))+
geom_point(mapping=aes(color = nombre))
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)+
geom_text(aes(label=nombre),hjust = 0, nudge_x = 0.05, color="blue",size=3)
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)+
geom_text(aes(label=nombre,color=nombre),hjust = 0, nudge_x = 0.05, ,size=3)
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)+
geom_text(aes(label=nombre,color=nombre),hjust = 0, nudge_x = 0.05,size=4)
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)+
geom_text(aes(label=nombre,color=nombre),hjust = 5, nudge_x = -5,size=4)
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)+
geom_text(aes(label=nombre,color=nombre),hjust = 1, nudge_x = -1,size=4)
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)+
geom_text(aes(label=nombre,color=nombre),
hjust = 1, nudge_x = -1,size=4)+
labs(title = 'Seguidores vs `public_repo')
ggplot(data = map_df(gh_users, ~data_frame(
public_repos =.x[["public_repos"]],
followers = .x[["followers"]],
nombre  = .x[["name"]])),
aes(x = public_repos, y = followers))+
geom_point(mapping=aes(color = nombre),size=7)+
geom_text(aes(label=nombre),
hjust = 1, nudge_x = -1,size=4)+
labs(title = 'Seguidores vs `public_repo')
