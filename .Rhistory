xlab = " ",ylab=" ")
lines(c(0,max(altura,ancho)),c(0,0))
}
# pintamos el edificio de color gris
#alfa<-runif(1,0.4,1)
color_edificio<-adjustcolor(col, alpha.f = alfa)
rect(x0, y0, ancho+x0,altura+y0, col = color_edificio)
# bucle para los pisos
# pintamos lineas horizontales
for (i in 2:npisos-1){# no incluye el piso bajo
x1<-c(x0,x0+ancho)
y_piso<-i*h+y0 # altura del piso
y1<-c(y_piso,y_piso)
lines(x1,y1,lty=2)
# por cada piso hacemos las ventanas
altura_ventana_suelo<-1
for (k in 0:(nvent-1)){
# vertice x bajo de la ventana
xv<-a/2-ancho_ventana/2+a*k
# vertice y bajo de la ventana
yv<-y_piso+altura_ventana_suelo
# pintamos ventana
#color encendido apagado de luz
color_ventana<-ifelse(runif(1)>0.7,"yellow","black")
rect(x0+xv,yv,x0+xv+ancho_ventana,yv+ancho_ventana,
col = color_ventana)
}
}
}
edificio3(26,3,15,alfa=0.8,col="wheat")
edificio3(12,2,5,10,borrar=F)
edificio3(22,7,45,23,borrar=F)
edificio3(10,3,30,10,borrar=F)
edificio3(26,3,15,alfa=0.3,col="wheat")
edificio3<-function(npisos=10,nvent=3,x0=0,y0=0,borrar=T,alfa=1,col="grey"){
#y0 <- 0
h <-3.5 # altura de un piso
a <- 4 #ancho de la habitación de fachada
ancho_ventana <-1.5
altura <-h*npisos # altura total del edificio
ancho <-a*nvent # ancho total del edificio
# pintamos una grafica vacía que contenga la escala de maximos
# si borrar=T vacía el lienzo
if(borrar==T){
plot(1:max(altura,ancho),type="n",
xlim = c(0,max(altura,ancho)),
xlab = " ",ylab=" ")
lines(c(0,max(altura,ancho)),c(0,0))
}
# pintamos el edificio de color gris
#alfa<-runif(1,0.4,1)
color_edificio<-adjustcolor(col, alpha.f = alfa)
rect(x0, y0, ancho+x0,altura+y0, col = color_edificio)
# bucle para los pisos
# pintamos lineas horizontales
for (i in 2:npisos-1){# no incluye el piso bajo
x1<-c(x0,x0+ancho)
y_piso<-i*h+y0 # altura del piso
y1<-c(y_piso,y_piso)
lines(x1,y1,lty=2)
# por cada piso hacemos las ventanas
altura_ventana_suelo<-1
for (k in 0:(nvent-1)){
# vertice x bajo de la ventana
xv<-a/2-ancho_ventana/2+a*k
# vertice y bajo de la ventana
yv<-y_piso+altura_ventana_suelo
# pintamos ventana
#color encendido apagado de luz
color_ventana<-ifelse(runif(1)>0.7,"yellow","black")
color_ventana<-adjustcolor(color_ventana, alpha.f = alfa)
rect(x0+xv,yv,x0+xv+ancho_ventana,yv+ancho_ventana,
col = color_ventana)
}
}
}
edificio3(26,3,15,alfa=0.3,col="wheat")
edificio3(12,2,5,10,borrar=F)
edificio3(22,7,45,23,borrar=F)
edificio3<-function(npisos=10,nvent=3,x0=0,y0=0,borrar=T,alfa=1,col="grey"){
#y0 <- 0
h <-3.5 # altura de un piso
a <- 4 #ancho de la habitación de fachada
ancho_ventana <-1.5
altura <-h*npisos # altura total del edificio
ancho <-a*nvent # ancho total del edificio
# pintamos una grafica vacía que contenga la escala de maximos
# si borrar=T vacía el lienzo
if(borrar==T){
plot(1:max(altura,ancho),type="n",
xlim = c(0,max(altura,ancho)),
xlab = " ",ylab=" ")
lines(c(0,max(altura,ancho)),c(0,0))
}
# pintamos el edificio de color gris
#alfa<-runif(1,0.4,1)
color_edificio<-adjustcolor(col, alpha.f = alfa)
rect(x0, y0, ancho+x0,altura+y0, col = color_edificio)
# bucle para los pisos
# pintamos lineas horizontales
for (i in 2:npisos-1){# no incluye el piso bajo
x1<-c(x0,x0+ancho)
y_piso<-i*h+y0 # altura del piso
y1<-c(y_piso,y_piso)
lines(x1,y1,lty=2,alpha=alfa)
# por cada piso hacemos las ventanas
altura_ventana_suelo<-1
for (k in 0:(nvent-1)){
# vertice x bajo de la ventana
xv<-a/2-ancho_ventana/2+a*k
# vertice y bajo de la ventana
yv<-y_piso+altura_ventana_suelo
# pintamos ventana
#color encendido apagado de luz
color_ventana<-ifelse(runif(1)>0.7,"yellow","black")
color_ventana<-adjustcolor(color_ventana, alpha.f = alfa)
rect(x0+xv,yv,x0+xv+ancho_ventana,yv+ancho_ventana,
col = color_ventana)
}
}
}
edificio3(26,3,15,alfa=0.3,col="wheat")
edificio3(12,2,5,10,borrar=F)
edificio3(10,3,30,10,borrar=F,alfa=0.3)
edificio3(10,3,50,10,borrar=F,alfa=0.1)
edificio3<-function(npisos=10,nvent=3,x0=0,y0=0,borrar=T,alfa=1,col="grey"){
#y0 <- 0
h <-3.5 # altura de un piso
a <- 4 #ancho de la habitación de fachada
ancho_ventana <-1.5
altura <-h*npisos # altura total del edificio
ancho <-a*nvent # ancho total del edificio
# pintamos una grafica vacía que contenga la escala de maximos
# si borrar=T vacía el lienzo
if(borrar==T){
plot(1:max(altura,ancho),type="n",
xlim = c(0,max(altura,ancho)),
xlab = " ",ylab=" ")
lines(c(0,max(altura,ancho)),c(0,0))
}
# pintamos el edificio de color gris
#alfa<-runif(1,0.4,1)
color_edificio<-adjustcolor(col, alpha.f = alfa)
col_border<-adjustcolor(par("fg"), alpha.f = alfa)
rect(x0, y0, ancho+x0,altura+y0, col = color_edificio, border = col_border)
# bucle para los pisos
# pintamos lineas horizontales
for (i in 2:npisos-1){# no incluye el piso bajo
x1<-c(x0,x0+ancho)
y_piso<-i*h+y0 # altura del piso
y1<-c(y_piso,y_piso)
lines(x1,y1,lty=2,alpha=alfa)
# por cada piso hacemos las ventanas
altura_ventana_suelo<-1
for (k in 0:(nvent-1)){
# vertice x bajo de la ventana
xv<-a/2-ancho_ventana/2+a*k
# vertice y bajo de la ventana
yv<-y_piso+altura_ventana_suelo
# pintamos ventana
#color encendido apagado de luz
color_ventana<-ifelse(runif(1)>0.7,"yellow","black")
color_ventana<-adjustcolor(color_ventana, alpha.f = alfa)
rect(x0+xv,yv,x0+xv+ancho_ventana,yv+ancho_ventana,
col = color_ventana)
}
}
}
edificio3(26,3,15,alfa=0.3,col="wheat")
edificio3<-function(npisos=10,nvent=3,x0=0,y0=0,borrar=T,alfa=1,col="grey"){
#y0 <- 0
h <-3.5 # altura de un piso
a <- 4 #ancho de la habitación de fachada
ancho_ventana <-1.5
altura <-h*npisos # altura total del edificio
ancho <-a*nvent # ancho total del edificio
# pintamos una grafica vacía que contenga la escala de maximos
# si borrar=T vacía el lienzo
if(borrar==T){
plot(1:max(altura,ancho),type="n",
xlim = c(0,max(altura,ancho)),
xlab = " ",ylab=" ")
lines(c(0,max(altura,ancho)),c(0,0))
}
# pintamos el edificio de color gris
#alfa<-runif(1,0.4,1)
color_edificio<-adjustcolor(col, alpha.f = alfa)
col_border<-adjustcolor(par("fg"), alpha.f = alfa)
rect(x0, y0, ancho+x0,altura+y0, col = color_edificio, border = col_border)
# bucle para los pisos
# pintamos lineas horizontales
for (i in 2:npisos-1){# no incluye el piso bajo
x1<-c(x0,x0+ancho)
y_piso<-i*h+y0 # altura del piso
y1<-c(y_piso,y_piso)
lines(x1,y1,lty=2,col = col_border)
# por cada piso hacemos las ventanas
altura_ventana_suelo<-1
for (k in 0:(nvent-1)){
# vertice x bajo de la ventana
xv<-a/2-ancho_ventana/2+a*k
# vertice y bajo de la ventana
yv<-y_piso+altura_ventana_suelo
# pintamos ventana
#color encendido apagado de luz
color_ventana<-ifelse(runif(1)>0.7,"yellow","black")
color_ventana<-adjustcolor(color_ventana, alpha.f = alfa)
rect(x0+xv,yv,x0+xv+ancho_ventana,yv+ancho_ventana,
col = color_ventana,border = col_border)
}
}
}
edificio3(26,3,15,alfa=0.3,col="wheat")
edificio3(12,2,5,10,borrar=F)
edificio3(22,7,45,23,borrar=F)
edificio3(10,3,50,10,borrar=F,alfa=0.1)
ciudad2<-function(M=200,H=140, y0=0, alfa=1,col="grey"){
# Pinta el lienzo de la ciudad
plot(1:H,type="n",
xlim = c(0,M),
xlab = " ",ylab=" ")
lines(c(0,M),c(0,0))
nedif<-as.integer(M/12)
# de 2 a 8 ventanas
v_en_fachadas<-2:7
alturas<-5:as.integer(H/3.5)
vector_v<- sample(v_en_fachadas,nedif,replace = TRUE)
vector_y<- sample(alturas,nedif)
x0<-0
for(i in seq_along(vector_v)){
edificio3(vector_y[i],vector_v[i],x0,y0,borrar=F,alfa=alfa,col=col)
x0<-vector_v[i]*4+x0
#edificio2(npisos,nvent=3,x0=0,borrar=T){
}
}
ciudad2(alfa=0.5,col="red")
ciudad2(alfa=0.5,col="red", y0=20)
#ciudad2(alfa=0.5,col="red")
ciudad2(alfa=0.3,col="blue", y0=20)
ciudad2(alfa=0.5,col="red", y0=0,borrar=F)
ciudad2(alfa=0.5,col="red", y0=0,borrar=FALSE)
ciudad2<-function(M=200,H=140, y0=0, alfa=1,col="grey",borrar=T){
# Pinta el lienzo de la ciudad
if(borrar==T){
plot(1:H,type="n",
xlim = c(0,M),
xlab = " ",ylab=" ")
lines(c(0,M),c(0,0))
}
nedif<-as.integer(M/12)
# de 2 a 8 ventanas
v_en_fachadas<-2:7
alturas<-5:as.integer(H/3.5)
vector_v<- sample(v_en_fachadas,nedif,replace = TRUE)
vector_y<- sample(alturas,nedif)
x0<-0
for(i in seq_along(vector_v)){
edificio3(vector_y[i],vector_v[i],x0,y0,borrar=F,alfa=alfa,col=col)
x0<-vector_v[i]*4+x0
#edificio2(npisos,nvent=3,x0=0,borrar=T){
}
}
#ciudad2(alfa=0.5,col="red")
ciudad2(alfa=0.3,col="blue", y0=20)
ciudad2(alfa=0.5,col="red", y0=0,borrar=FALSE)
ciudad2(alfa=1,col="grey", y0=0,borrar=FALSE)
ciudad2<-function(M=200,H=140, y0=0, alfa=1,col="grey",borrar=T){
# Pinta el lienzo de la ciudad
if(borrar==T){
plot(1:H,type="n",
xlim = c(0,M),
xlab = " ",ylab=" ",axes=FALSE)
lines(c(0,M),c(0,0))
}
nedif<-as.integer(M/12)
# de 2 a 8 ventanas
v_en_fachadas<-2:7
alturas<-5:as.integer(H/3.5)
vector_v<- sample(v_en_fachadas,nedif,replace = TRUE)
vector_y<- sample(alturas,nedif)
x0<-0
for(i in seq_along(vector_v)){
edificio3(vector_y[i],vector_v[i],x0,y0,borrar=F,alfa=alfa,col=col)
x0<-vector_v[i]*4+x0
#edificio2(npisos,nvent=3,x0=0,borrar=T){
}
}
#ciudad2(alfa=0.5,col="red")
ciudad2(alfa=0.3,col="blue", y0=20)
ciudad2(alfa=0.5,col="red", y0=0,borrar=FALSE)
ciudad2(H=60,alfa=1,col="grey", y0=0,borrar=FALSE)
ciudad2(H=100,alfa=1,col="grey", y0=0,borrar=FALSE)
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
library("bookdown", lib.loc="~/R/win-library/3.5")
blogdown:::serve_site()
install.packages("maptools")
install.packages("prettymapr")
install.packages("ggspatial")
install.packages("OpenStreetMap")
blogdown:::serve_site()
#Mapa de España
library(OpenStreetMap)
library("rJava", lib.loc="~/R/win-library/3.5")
install.packages("rJava")
#Mapa de España
library(OpenStreetMap)
#Mapa de España
library(OpenStreetMap)
require(prettymapr)
# plano con puntos a mano
lon = c(-1.5058806338,-1.4055545377,-1.1244527259)
lat = c(38.5723968325393,39.1989447389502,38.8332362700093)
nom = c("Albatana","Alcalá del Jucar","Almansa")
datos<-data.frame(lon,lat,nom)
#usamos funciones de la library(sp)
capa_pueblos<-sp::SpatialPointsDataFrame(cbind(lon,lat),datos)
# asignamos un sistema de coordenaas
sp::proj4string(capa_pueblos) <- sp::CRS("+init=epsg:4326")
prettymap({
# Añadimos fondo
osm.plot(capa_pueblos,type="opencycle")
# Añadimos puntos
osm.points(capa_pueblos$lon, capa_pueblos$lat,pch=15,col="blue", cex=3)
# Añadimos texto de etiquetas
osm.text(capa_pueblos$lon, capa_pueblos$lat,labels=capa_pueblos$nom,adj=c(-0.3, 0.5), cex=1.2,col="blue")
},drawbox = TRUE,box.lwd=4,
scale.pos = "bottomright", # posicion de las escala
arrow.pos="topright", # posicion de la flecha
drawarrow=T,arrow.scale=1)
library(rosm)
prettymap({
# Añadimos fondo
osm.plot(capa_pueblos,type="opencycle")
# Añadimos puntos
osm.points(capa_pueblos$lon, capa_pueblos$lat,pch=15,col="blue", cex=3)
# Añadimos texto de etiquetas
osm.text(capa_pueblos$lon, capa_pueblos$lat,labels=capa_pueblos$nom,adj=c(-0.3, 0.5), cex=1.2,col="blue")
},drawbox = TRUE,box.lwd=4,
scale.pos = "bottomright", # posicion de las escala
arrow.pos="topright", # posicion de la flecha
drawarrow=T,arrow.scale=1)
library(ggplot2)
library(ggspatial)
library(ggspatial)
library(sp)
torrevieja <- data.frame(lon = c(-0.69,-0.67,-0.685,-0.681),
lat = c(37.98,37.97,37.978,37.975))
# Convertimos la tabla de puntos en capa espacial con sp
capa_puntos<-SpatialPoints(torrevieja)
# asignamos un sistema de coordenaas
sp::proj4string(capa_puntos) <- CRS("+init=epsg:4326")
# pintamos el mapa con ggplot y ggspatial
ggplot()+
ggtitle("Plano Torrevieja con puntos de interés")+
annotation_map_tile(type = "osm",zoom=15)+
layer_spatial(capa_puntos,size = 8, col="red",alpha = 0.5)+
annotation_scale(location = "br")+ # pinta leyenda
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering,
height = unit(1.5, "cm"),
width = unit(1.5, "cm"))
blogdown:::serve_site()
suppressMessages(library(maptools, warn.conflicts = F))
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning=FALSE)
R=3000 # m de dario
I= 1000 # esto marca el factor de irregularidad de la cirunferecia
N=16 # el numero de puntos en que dividimos la circunferencia para representar
paso<-2*pi/N
coord<-data.frame(x=NA,y=NA)
for(i in 0:N-1){
x<-(R+rnorm(1,I,I))*cos(paso*i)
y<-(R+rnorm(1,I,I))*sin(paso*i)
coord<-rbind(coord,c(x,y))
}
coord<-na.omit(coord)
coord<-rbind(coord,c(coord[1,1],coord[1,2]))
plot(coord,col="darkslategray",lwd=3, main="Isla aleatoria")
polygon(coord[,1],coord[,2],border = "burlywood4",col="bisque4")
# colores sacados de : http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
par(mar=c(0,0,0,01)+.1)
R=3000 # m de dario
I= 1000 # esto marca el factor de irregularidad de la cirunferecia
N=16 # el numero de puntos en que dividimos la circunferencia para representar
paso<-2*pi/N
coord<-data.frame(x=NA,y=NA)
for(i in 0:N-1){
x<-(R+rnorm(1,I,I))*cos(paso*i)
y<-(R+rnorm(1,I,I))*sin(paso*i)
coord<-rbind(coord,c(x,y))
}
coord<-na.omit(coord)
coord<-rbind(coord,c(coord[1,1],coord[1,2]))
plot(coord,col="darkslategray",lwd=3, main="Isla aleatoria")
polygon(coord[,1],coord[,2],border = "burlywood4",col="bisque4")
# colores sacados de : http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
R=3000 # m de dario
I= 1000 # esto marca el factor de irregularidad de la cirunferecia
N=16 # el numero de puntos en que dividimos la circunferencia para representar
paso<-2*pi/N
coord<-data.frame(x=NA,y=NA)
for(i in 0:N-1){
x<-(R+rnorm(1,I,I))*cos(paso*i)
y<-(R+rnorm(1,I,I))*sin(paso*i)
coord<-rbind(coord,c(x,y))
}
coord<-na.omit(coord)
coord<-rbind(coord,c(coord[1,1],coord[1,2]))
plot(coord,col="darkslategray",lwd=3, main="Isla aleatoria")
polygon(coord[,1],coord[,2],border = "burlywood4",col="bisque4")
# colores sacados de : http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
R=3000 # m de dario
I= 1000 # esto marca el factor de irregularidad de la cirunferecia
N=16 # el numero de puntos en que dividimos la circunferencia para representar
paso<-2*pi/N
coord<-data.frame(x=NA,y=NA)
for(i in 0:N-1){
x<-(R+rnorm(1,I,I))*cos(paso*i)
y<-(R+rnorm(1,I,I))*sin(paso*i)
coord<-rbind(coord,c(x,y))
}
coord<-na.omit(coord)
coord<-rbind(coord,c(coord[1,1],coord[1,2]))
plot(coord,col="darkslategray",lwd=3, main="Isla aleatoria")
polygon(coord[,1],coord[,2],border = "burlywood4",col="bisque4")
# colores sacados de : http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
puntomedio<-function(x1,y1,x2,y2){
# calcula el punto medio y lo mueve
# un porcentaje aleatorio sobre al perpendicular del lado
xmed<-(x1+x2)/2
ymed<-(y1+y2)/2
# calculamos punto perpendicular aleatorio
vx<- -(y2-y1) # por anlgulos es el eje opuesto
vy<-(x2-x1)
d<-0.5*runif(1)
# punto final
x0<-xmed+d*vx
y0<-ymed+d*vy
return(c(x0,y0))
}
# creamos un poligono nuevo
n_pol<-data.frame(x=NA,y=NA)
# aplicamos la funión de punto medio
for (i in 1:nrow(coord)-1){
n_pol<-rbind(n_pol,c(coord[i,1],coord[i,2]))
n_pol<-rbind(n_pol,puntomedio(coord[i,1],coord[i,2],coord[i+1,1],coord[i+1,2]))
n_pol<-rbind(n_pol,c(coord[i+1,1],coord[i+1,2]))
}
n_pol<-na.omit(n_pol)
plot(n_pol,col="darkslategray",lwd=3, main="Isla aleatoria")
polygon(n_pol[,1],n_pol[,2],border = "burlywood4",col="bisque4")
# función que genera un primer poligono aleatorio de isla
pol_cero<-function(R=3000,N=10){
# R= diametro medio de la isla en m
I<- R/3 # desviación media de irregularidades
#N<-N # número de puntos base del boceto siempre <20
paso<-2*pi/N
# creamos poligono inicial como data.frame
pol_coord<-data.frame(x=NA,y=NA)
for(i in 0:N-1){
x<-(R+rnorm(1,I,I/2))*cos(paso*i)
y<-(R+rnorm(1,I,I*2))*sin(paso*i)
pol_coord<-rbind(pol_coord,c(x,y))
}
pol_coord<-na.omit(pol_coord)
# Añadimos al final el punto origen para cerrar el poligono
pol_coord<-rbind(pol_coord,c(pol_coord[1,1],pol_coord[1,2]))
return(pol_coord)
}
# función que divide en 2 cada lado del poligono
# los datos de entrada deben ser un data.frame
div_pol<-function(poligon){
n_pol<-data.frame(x=NA,y=NA)
# aplicamos la funión de punto medio
for (i in 1:nrow(poligon)-1){
n_pol<-rbind(n_pol,c(poligon[i,1],poligon[i,2]))
n_pol<-rbind(n_pol,puntomedio(poligon[i,1],poligon[i,2],poligon[i+1,1],poligon[i+1,2]))
n_pol<-rbind(n_pol,c(poligon[i+1,1],poligon[i+1,2]))
}
n_pol<-na.omit(n_pol)
return(n_pol)
}
# funcion recursiva
div_pol_n<-function(poligon, N){
z<-poligon
for(i in 1:N){
z<- div_pol(z)
}
return(z)
}
# funcion final que crea y pinta una isla
crea_isla<-function(R=3000,N=6){
#N=4
z<-pol_cero(5000,N)
z<-div_pol_n(z,4)
plot(z,col="darkslategray", cex=0.2,main=paste("Isla aleatoria: R=",R," N=",N))
polygon(z[,1],z[,2],border = "black",col="bisque4", lwd = 3)
}
crea_isla(3000,6)
# ajusta la grafica para 6 dibujos
par(mfrow=c(3,2))
par(mar=c(0,0,0,01)+.1)
# genera 6 radios aleatorios
radio<-as.integer(rnorm(6,8000,3000))
n_pun<-as.integer(runif(6,3,15))
# llama a la funcion 6 veces
#sapply(radio,crea_isla,N=14)
mapply(crea_isla,radio,n_pun)
# vuelve al modo una
par(mfrow=c(1,1))
blogdown:::serve_site()
