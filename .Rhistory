iris(rext=riris,rint=0.2*p,x0=x0+1.5*p,y0=y0,n_lineas=105)
draw.circle(x0+1.5*p,y=y0,0.2*p,col="black",lwd=2)
# reflejo
#symbols(x0+1.45, y=y0+0.12*p, circles=.05,add = TRUE,bg="white", inches = T)
draw.circle(x0+1.45*p,y=y0+0.12*p,0.05*p,col="white",lwd=1)
#parpados
parpados <- xspline(x, y, 0.5, draw = FALSE)
lines(parpados, lwd=2)
#lines(parpados$x,parpados$y*1.2, lwd=2,col="red")
parpa_y<-c(y[1],y[2]+pap,y[3]+pap,y[4])
parpa_x<-c(x[1],x[2],x[3],x[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
pestanas(linea_pes = xspline(parpa_x, parpa_y, 1, draw = FALSE),n_lineas=100)
parpa_y<-c(y[1],y[7]-pap,y[6]-pap,y[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
}
# vamos con un ejemplo
# hacemos un vector de colores
colores<-c("lightblue","aliceblue","burlywood4","bisque3","bisque4","azure2","darkolivegreen3","aquamarine1","aquamarine3","antiquewhite3", "red", "blue","violet")
plot(1, type="n", xlab="", ylab="", xlim=c(0, 7), ylim=c(0, 7))
for (i in 1:6){
f.ojo1(x0=runif(1,0,5-2),y0=runif(1,0.5,5.5),color=sample(colores,1),p=runif(1,0.5,2))
}
library(plotrix)
# Función general que pinta un ojo
f.ojo1<-function(x0=5,y0=5,p=1, color="lightblue",pap=0.2){
x<-c(0,1,2,3,3,2,1,0)*p
y<-c(0,0.8+rnorm(1,0,0.1),0.8+rnorm(1,0,0.1),0,0,-0.7+rnorm(1,0,0.1),-0.9+rnorm(1,0,0.1),0)*p
#max(x)-min(y)
ojo <- xspline(x, y, 1, draw = FALSE)
x<-x0+x
y<-y0+y
ojo$x<-x0+ojo$x
ojo$y<-y0+ojo$y
#points(x, y, pch = 19, col="red")
polygon(ojo, col=gray(runif(1,0.20,1)))
lines(ojo, lwd=1)
# iris
riris<-p*(0.6)#+rnorm(1,0,0.1))
#symbols(x0+1.5, y=y0, circles=.5*p,add = TRUE,bg="lightblue",lwd=2, inches = T)
draw.circle(x0+1.5*p,y=y0,radius=riris,col=color,lwd=1)
# pupila
#symbols(x0+1.5, y=y0, circles=.2*p,add = TRUE,bg="black", inches = T)
iris(rext=riris,rint=0.2*p,x0=x0+1.5*p,y0=y0,n_lineas=105)
draw.circle(x0+1.5*p,y=y0,0.2*p,col="black",lwd=2)
# reflejo
#symbols(x0+1.45, y=y0+0.12*p, circles=.05,add = TRUE,bg="white", inches = T)
draw.circle(x0+1.45*p,y=y0+0.12*p,0.05*p,col="white",lwd=1)
#parpados
parpados <- xspline(x, y, 0.5, draw = FALSE)
lines(parpados, lwd=2)
#lines(parpados$x,parpados$y*1.2, lwd=2,col="red")
parpa_y<-c(y[1],y[2]+pap,y[3]+pap,y[4])
parpa_x<-c(x[1],x[2],x[3],x[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
pestanas(linea_pes = xspline(parpa_x, parpa_y, 1, draw = FALSE),n_lineas=100)
parpa_y<-c(y[1],y[7]-pap,y[6]-pap,y[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
}
# vamos con un ejemplo
# hacemos un vector de colores
colores<-c("lightblue","aliceblue","burlywood4","bisque3","bisque4","azure2","darkolivegreen3","aquamarine1","aquamarine3","antiquewhite3", "red", "blue","violet")
plot(1, type="n", xlab="", ylab="", xlim=c(0, 7), ylim=c(0, 7))
for (i in 1:6){
f.ojo1(x0=runif(1,0,5-2),y0=runif(1,0.5,5.5),color=sample(colores,1),p=runif(1,0.5,2))
}
library(plotrix)
# Función general que pinta un ojo
f.ojo1<-function(x0=5,y0=5,p=1, color="lightblue",pap=0.2){
x<-c(0,1,2,3,3,2,1,0)*p
y<-c(0,0.8+rnorm(1,0,0.1),0.8+rnorm(1,0,0.1),0,0,-0.7+rnorm(1,0,0.1),-0.9+rnorm(1,0,0.1),0)*p
#max(x)-min(y)
ojo <- xspline(x, y, 1, draw = FALSE)
x<-x0+x
y<-y0+y
ojo$x<-x0+ojo$x
ojo$y<-y0+ojo$y
#points(x, y, pch = 19, col="red")
polygon(ojo, col=gray(runif(1,0.20,1)))
lines(ojo, lwd=1)
# iris
riris<-p*(0.5)#+rnorm(1,0,0.1))
#symbols(x0+1.5, y=y0, circles=.5*p,add = TRUE,bg="lightblue",lwd=2, inches = T)
draw.circle(x0+1.5*p,y=y0,radius=riris,col=color,lwd=1)
# pupila
#symbols(x0+1.5, y=y0, circles=.2*p,add = TRUE,bg="black", inches = T)
iris(rext=riris,rint=0.2*p,x0=x0+1.5*p,y0=y0,n_lineas=105)
draw.circle(x0+1.5*p,y=y0,0.2*p,col="black",lwd=2)
# reflejo
#symbols(x0+1.45, y=y0+0.12*p, circles=.05,add = TRUE,bg="white", inches = T)
draw.circle(x0+1.45*p,y=y0+0.12*p,0.05*p,col="white",lwd=1)
#parpados
parpados <- xspline(x, y, 0.5, draw = FALSE)
lines(parpados, lwd=2)
#lines(parpados$x,parpados$y*1.2, lwd=2,col="red")
parpa_y<-c(y[1],y[2]+pap,y[3]+pap,y[4])
parpa_x<-c(x[1],x[2],x[3],x[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
pestanas(linea_pes = xspline(parpa_x, parpa_y, 1, draw = FALSE),n_lineas=100)
parpa_y<-c(y[1],y[7]-pap,y[6]-pap,y[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
}
# vamos con un ejemplo
# hacemos un vector de colores
colores<-c("lightblue","aliceblue","burlywood4","bisque3","bisque4","azure2","darkolivegreen3","aquamarine1","aquamarine3","antiquewhite3", "red", "blue","violet")
plot(1, type="n", xlab="", ylab="", xlim=c(0, 7), ylim=c(0, 7))
for (i in 1:6){
f.ojo1(x0=runif(1,0,5-2),y0=runif(1,0.5,5.5),color=sample(colores,1),p=runif(1,0.5,2))
}
library(plotrix)
# Función general que pinta un ojo
f.ojo1<-function(x0=5,y0=5,p=1, color="lightblue",pap=0.2){
x<-c(0,1,2,3,3,2,1,0)*p
y<-c(0,0.8+rnorm(1,0,0.1),0.8+rnorm(1,0,0.1),0,0,-0.7+rnorm(1,0,0.1),-0.9+rnorm(1,0,0.1),0)*p
#max(x)-min(y)
ojo <- xspline(x, y, 1, draw = FALSE)
x<-x0+x
y<-y0+y
ojo$x<-x0+ojo$x
ojo$y<-y0+ojo$y
#points(x, y, pch = 19, col="red")
polygon(ojo, col=gray(runif(1,0.20,1)))
lines(ojo, lwd=1)
# iris
riris<-p*(0.5)#+rnorm(1,0,0.1))
#symbols(x0+1.5, y=y0, circles=.5*p,add = TRUE,bg="lightblue",lwd=2, inches = T)
draw.circle(x0+1.5*p,y=y0,radius=riris,col=color,lwd=1)
# pupila
#symbols(x0+1.5, y=y0, circles=.2*p,add = TRUE,bg="black", inches = T)
iris(rext=riris,rint=0.2*p,x0=x0+1.5*p,y0=y0,n_lineas=105)
draw.circle(x0+1.5*p,y=y0,0.2*p,col="black",lwd=2)
# reflejo
#symbols(x0+1.45, y=y0+0.12*p, circles=.05,add = TRUE,bg="white", inches = T)
draw.circle(x0+1.45*p,y=y0+0.12*p,0.05*p,col="white",lwd=1)
#parpados
parpados <- xspline(x, y, 0.5, draw = FALSE)
lines(parpados, lwd=2)
#lines(parpados$x,parpados$y*1.2, lwd=2,col="red")
parpa_y<-c(y[1],y[2]+pap,y[3]+pap,y[4])
parpa_x<-c(x[1],x[2],x[3],x[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
pestanas(linea_pes = xspline(parpa_x, parpa_y, 1, draw = FALSE),n_lineas=100)
parpa_y<-c(y[1],y[7]-pap,y[6]-pap,y[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
}
# vamos con un ejemplo
# hacemos un vector de colores
colores<-c("lightblue","aliceblue","burlywood4","bisque3","bisque4","azure2","darkolivegreen3","aquamarine1","aquamarine3","antiquewhite3", "red", "blue","violet")
plot(1, type="n", xlab="", ylab="", xlim=c(0, 7), ylim=c(0, 7))
for (i in 1:6){
f.ojo1(x0=runif(1,0,5-2),y0=runif(1,0.5,5.5),color=sample(colores,1),p=runif(1,0.5,2))
}
plot(1, type="n", xlab="", ylab="", xlim=c(0, 7), ylim=c(0, 7))
for (i in 1:6){
f.ojo1(x0=runif(1,0,5-2),y0=runif(1,0.5,5.5),color=sample(colores,1),p=runif(1,0.5,2))
}
library(plotrix)
# Función general que pinta un ojo
f.ojo1<-function(x0=5,y0=5,p=1, color="lightblue",pap=0.2){
x<-c(0,1,2,3,3,2,1,0)*p
y<-c(0,0.8+rnorm(1,0,0.1),0.8+rnorm(1,0,0.1),0,0,-0.7+rnorm(1,0,0.1),-0.9+rnorm(1,0,0.1),0)*p
#max(x)-min(y)
ojo <- xspline(x, y, 1, draw = FALSE)
x<-x0+x
y<-y0+y
ojo$x<-x0+ojo$x
ojo$y<-y0+ojo$y
#points(x, y, pch = 19, col="red")
polygon(ojo, col=gray(runif(1,0.20,1)))
lines(ojo, lwd=1)
# iris
riris<-p*(0.55)#+rnorm(1,0,0.1))
#symbols(x0+1.5, y=y0, circles=.5*p,add = TRUE,bg="lightblue",lwd=2, inches = T)
draw.circle(x0+1.5*p,y=y0,radius=riris,col=color,lwd=1)
# pupila
#symbols(x0+1.5, y=y0, circles=.2*p,add = TRUE,bg="black", inches = T)
iris(rext=riris,rint=0.2*p,x0=x0+1.5*p,y0=y0,n_lineas=105)
draw.circle(x0+1.5*p,y=y0,0.2*p,col="black",lwd=2)
# reflejo
#symbols(x0+1.45, y=y0+0.12*p, circles=.05,add = TRUE,bg="white", inches = T)
draw.circle(x0+1.45*p,y=y0+0.12*p,0.05*p,col="white",lwd=1)
#parpados
parpados <- xspline(x, y, 0.5, draw = FALSE)
lines(parpados, lwd=2)
#lines(parpados$x,parpados$y*1.2, lwd=2,col="red")
parpa_y<-c(y[1],y[2]+pap,y[3]+pap,y[4])
parpa_x<-c(x[1],x[2],x[3],x[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
pestanas(linea_pes = xspline(parpa_x, parpa_y, 1, draw = FALSE),n_lineas=100)
parpa_y<-c(y[1],y[7]-pap,y[6]-pap,y[4])
#parpado superior
lines(xspline(parpa_x, parpa_y, 1, draw = FALSE), lwd=3,col="black")
}
# vamos con un ejemplo
# hacemos un vector de colores
colores<-c("lightblue","aliceblue","burlywood4","bisque3","bisque4","azure2","darkolivegreen3","aquamarine1","aquamarine3","antiquewhite3", "red", "blue","violet")
plot(1, type="n", xlab="", ylab="", xlim=c(0, 7), ylim=c(0, 7))
for (i in 1:6){
f.ojo1(x0=runif(1,0,5-2),y0=runif(1,0.5,5.5),color=sample(colores,1),p=runif(1,0.5,2))
}
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(DiagrammeR)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1(Yaya-Yayo)-->15[Papá-Mamá];
1-->3[Tía A];
1-->10[Tío B-B1];
1-->6[Tío C-C1];
15-->16[Yo-Tú]
16-->18[hijo1]
16-->19[hijo2]
style 1 fill:#E5E25F;
style 15 fill:#81F7BE;
style 19 fill:#FAAC58;
style 16 fill:#FA58F4
"
)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("digest")
blogdown:::serve_site()
blogdown:::new_post_addin()
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
#Calculamos el numero de elementos de cada sublista
map_int(lista.compra, ~.x %>% length())
# creamos una lista
lista.compra<-list(comida=c("manzanas", "peras", "chocolate", "pollo"),
bebida=c("leche","vino"),
numtef=c(912345678,912783782,939287833))
#Calculamos el numero de elementos de cada sublista
map_int(lista.compra, ~.x %>% length())
#o tambien así
map_int(lista.compra, length)
# Ejemplo:
# seleccionamos solo el segundo elemento de cada elemento de la lista
map(lista.compra, ~.x[2])
# el 3 elemento de la lista segunda
lista.compra[[2]][3]
# el 3 elemento de la lista segunda
lista.compra[[2]][1]
#cargamos los dato
data(gh_users)
library(repurrrsive)
#cargamos los dato
data(gh_users)
# Checamos si tiene nombre
names(gh_users)
# Como no tiene leemos el subelemento name
# de cada elemento de la lista y lo asignamos como nombre.
map(gh_users, ~.x[["name"]])
gh_users_nom <- gh_users %>%
set_names(map_chr(gh_users, "name"))
# ahora ya tiene nombres:
names(gh_users_nom)
gh_users_nom$`Julia Silge`[2]
gh_users_nom$`Julia Silge`[3]
input_list <- list(
nombre= c("Juan", "Ana", "Pepe"),
ingresos.mes = c(1000, 1500, 3000),
gastos.mes = c(800, 670, 1800),
variacion= c(200, 100, 1000))
str(input_list)
map(1:10,sum)
# Valores simulados
simdata <- pmap(input_list,
function(ingresos.mes,gastos.mes, variacion, nombre)
data.frame(ingresos=rnorm(mean=ingresos.mes,
n= 48,
sd= variacion/3),
gastos = rnorm(mean=gastos.mes,
n= 48,
sd= variacion),
persona = nombre))
head(simdata[[1]])
simdata[[1]]
head(simdata[[1]])
head(simdata[[1]])
dt_gastos<-bind_rows(simdata)
hist(dt_gastos$ingresos)
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
geom_bar(stat="identity",aes(fill=persona))
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
geom_col()+ stat_summary(fun.y = "mean", geom = "point", size = 5, color = "red", shape = 15)
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
geom_col()
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
geom_col(aes(fill=persona))
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
geom_bar(stat="identity",aes(fill=persona))
ggplot(dt_gastos) +aes(x=ingresos,fill=persona)+
geom_histogram()+geom_rug()
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
geom_col(aes(fill=persona))
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
stat_summary(fun.y = "mean", geom = "point", size = 5, color = "red", shape = 15)
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
stat_summary(fun.y = "mean", geom = "bar", size = 5, color = "red", shape = 15)
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
stat_summary(fun.y = "mean", geom = "bar", size = 1, color = persona, shape = 15)
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
stat_summary(fun.y = "mean", geom = "bar", size = 1, fill = persona)
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
stat_summary(fun.y = "mean", geom = "bar", size = 1, fill = dt_gastos$persona)
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
stat_summary(fun.y = "mean", geom = "bar")
ggplot(dt_gastos) +aes(x=persona,y=ingresos, fill=persona)+
stat_summary(fun.y = "mean", geom = "bar")
ggplot(dt_gastos) +aes(x=persona,y=ingresos, fill=persona)+
labs(title = "Ingresos medios por persona")+
labs(subtitle = "a partir de los datos generados")+
labs(y = "ingreso medio al mes")+
stat_summary(fun.y = "mean", geom = "bar")
ggplot(dt_gastos) +aes(x=persona,y=ingresos, fill=persona)+
labs(title = "Ingresos medios por persona")+
labs(subtitle = "a partir de los datos generados")+
labs(y = "ingreso medio al mes en €")+
stat_summary(fun.y = "mean", geom = "bar")
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
geom_bar(stat="identity",aes(fill=persona))
ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
geom_col(aes(fill=persona))
#  ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
#      geom_col(aes(fill=persona))
ggplot(dt_gastos) +aes(x=ingresos,fill=persona)+
geom_histogram()+geom_rug()
#  ggplot(dt_gastos) +aes(x=persona,y=ingresos)+
#      geom_col(aes(fill=persona))
ggplot(dt_gastos) +aes(x=ingresos,fill=persona)+
labs(title = "Ingresos mensuales por persona")+
geom_histogram()+geom_rug()
map(1:3,~.x)
map(1:3,~rep(.x,4))
map(1:3,~rep(.x,.x))
map(1:3,~runf(.x))
# List of 1, 2 and 3
means <- map(1:3,~runif(.x))
means
# List of 1, 2 and 3
caudales <- map(c(5,10,25),~10*runif(.x))
caudales
# Muestras de caudal de tamaño diferente
muestra <- map(c(5,10,25),~10*runif(.x)+.x)
muestra
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,10,25),~.x)
n_rios
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,10,12),~.x)
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,10,12),~.x)
n_rios
# Localizaciones
cuenca <- list("Norte", "Este","Sur")
names(n_rios)
# Localizaciones
cuenca <- list(c("Norte", "Este","Sur"),c(200,1000,500))
cuenca
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,10,12),~.x)
# Localizaciones
cuenca <- list(c("Norte", "Este","Sur"),c(200,1000,500))
# Map over two arguments: sites and means
dt_caudales <- map2(cuenca,muestra, ~data.frame(poblacion = .x[[1]],
caudales = rnorm(mean = .x[[2]], n = .y, sd = 100)))
# Map over two arguments: sites and means
dt_caudales <- map2(cuenca,n_rios, ~data.frame(poblacion = .x[[1]],
caudales = rnorm(mean = .x[[2]], n = .y, sd = 100)))
n_rios
cuenca
# Map over two arguments: sites and means
dt_caudales <- map2(cuenca,c(5,10,12), ~data.frame(poblacion = .x[[1]],
caudales = rnorm(mean = .x[[2]], n = .y, sd = 100)))
# Muestras de caudal de tamaño diferente
n_rios <- map(c(5,100,12),~.x)
n_rios
# Localizaciones
cuenca <- list("Norte", "Este","Sur")
cuenca
# Muestras de caudal de tamaño diferente
caudalaes_medios <- map(c(5,100,12),~.x)
# Map over two arguments: sites and means
dt_caudales <- map2(cuenca,caudalaes_medios, ~data.frame(cuenca = .x,
caudales = rnorm(mean = .y, n = 10, sd = .y/5)))
dt_caudales
bind_rows(dt_caudales)
bind_rows(dt_caudales)
ggplot(dt_caudales) +aes(x=cuenca,y=caudales, color=cuenca)+
labs(title = "Ingresos medios por persona")+
labs(subtitle = "a partir de los datos generados")+
labs(y = "ingreso medio al mes en €")+
geom_line()
# Map over two arguments: sites and means
l_caudales <- map2(cuenca,caudalaes_medios, ~data.frame(cuenca = .x,
caudales = rnorm(mean = .y, n = 10, sd = .y/5)))
# para unir las listas creadas en un solo dataframe usaremos dplyr
require(dplyr)
dt_caudales<-bind_rows(l_caudales)
ggplot(dt_caudales) +aes(x=cuenca,y=caudales, color=cuenca)+
labs(title = "Ingresos medios por persona")+
labs(subtitle = "a partir de los datos generados")+
labs(y = "ingreso medio al mes en €")+
geom_line()
ggplot(dt_caudales) +aes(x=cuenca,y=caudales, color=cuenca)+
labs(title = "Ingresos medios por persona")+
labs(subtitle = "a partir de los datos generados")+
labs(y = "ingreso medio al mes en €")+
geom_boxplot()
# Name gh_repos with the names of the repo owner
cuenca %>%
map_chr(~ .[[1]])
# Name gh_repos with the names of the repo owner
cuenca %>% map_chr(~ .[[1]]) %>%set_names(caudales_medios, .)
# Muestras de caudal de tamaño diferente
caudales_medios <- map(c(5,100,12),~.x)
caudales_medios
# Name gh_repos with the names of the repo owner
cuenca %>% map_chr(~ .[[1]]) %>% set_names(caudales_medios, .)
caudales_medios$Norte
#names(n_rios)<-c()
set_names(caudales_medios)<-cuenca
#names(n_rios)<-c()
set_names(caudales_medios,cuenca)
# Use map to iterate_
ficheros<- list.files(getwd())
ficheros
longletras<-map(ficheros,nchar)
# Output size of list object
print(longletras)
longletras<-map_int(ficheros,nchar)
longletras
# probamos como vector lógico
map_lgl(ficheros,nchar== 21)
# Use map to iterate_
ficheros<- list.files(getwd())
# probamos como vector lógico
map_lgl(ficheros,nchar== 21)
ficheros
# probamos como vector lógico
map_lgl(ficheros,nchar() == 21)
# probamos como vector lógico
map_lgl(ficheros,~nchar(.x) == 21)
# probamos como vector lógico
map_lgl(ficheros,~nchar(.x) == 5)
longletras
# probamos como vector lógico
map_lgl(ficheros,~nchar(.x) > 5)
# probamos como vector lógico
map_lgl(ficheros,~nchar(.x) > 9)
# probamos como vector lógico
map_lgl(ficheros,nchar > 9)
# probamos como vector lógico
map_lgl(longletras,nchar > 9)
map_dbl(10:20,~.x %>% as.character() %>% strsplit(""))
map_dbl(list(10:20),~.x %>% as.character() %>% strsplit(""))
map(10:20,~.x %>% as.character() %>% strsplit(""))
desc_num<-function(x){
x1<-as.character(x)
x2<-unlist(strsplit(x1,""))
x3<-sum(as.numeric(x2))
if(x3>10){
desc_num(x3)
} else{
x3}
}
desc_num(200)
map_dbl(1000:1200,~desc_num(.x))
desc_num(34560)
# ejecutamos la funcion en 100 numeros
map_dbl(1000:1200,~desc_num(.x))
dat<-data.frame(a=1:200,b=map_dbl(1:200,~desc_num(.x)))
dat
head(dat,20)
lapply(1:200,desc_num())
lapply(1:200,desc_num)
#con la lista sw_films
# Pull out the director element of sw_films in a list and character vector
map(sw_films, ~.x[["director"]])
map_chr(sw_films, ~.x[["director"]])
# Compare outputs when checking if director is George Lucas
map(sw_films, ~.x[["director"]] == "George Lucas")
map_lgl(sw_films, ~.x[["director"]] == "George Lucas")
# Pull out episode_id element as list
map(sw_films, ~.x[["episode_id"]])
# Pull out episode_id element as integer vector
map_int(sw_films, ~.x[["episode_id"]])
