aes(x=time(pro1$pred),
y=pro1$pred,color="red"),
col = "red"
)
time(pro1$pred)
ggplot(globtemp)
autoplot(globtemp)
autoplot(globtemp) +
#añadimos pronostico automatico
autolayer(pro1,PI=F, col="blue",lty=2)+
ggtitle("Comparación ajustes sobre pasado")+
geom_line(
aes(x=time(pro1$pred),
y=pro1$pred,color="red"),
col = "red"
)
autoplot(globtemp) +
#añadimos pronostico automatico
autolayer(pro1$pred,PI=F, col="blue",lty=2)+
ggtitle("Comparación ajustes sobre pasado")+
geom_line(
aes(x=time(pro1$pred),
y=pro1$pred,color="red"),
col = "red"
)
autoplot(globtemp) +
#añadimos pronostico automatico
autolayer(pro1$pred,col="blue",lty=2)+
ggtitle("Comparación ajustes sobre pasado")+
geom_line(
aes(x=time(pro1$pred),
y=pro1$pred,color="red"),
col = "red"
)
pro1$pred
autoplot(globtemp) +
#añadimos pronostico automatico
autolayer(pro1$pred,col="blue",lty=2)
autoplot(globtemp) +
#añadimos pronostico automatico
autolayer(pro1$pred,col="blue",lty=3)
autoplot(globtemp) +
#añadimos pronostico automatico
autolayer(pro1$pred)
autoplot(globtemp) +
#añadimos pronostico automatico
autolayer(pro1$pred)+
autolayer(pro2$pred)
autoplot(globtemp) +ggtitle("Comparación ajustes sobre pasado")+
#añadimos pronostico automatico
autolayer(pro1$pred)+
autolayer(pro2$pred)
autoplot(globtemp) +ggtitle("Comparación modelos 1 y 2")+
#añadimos pronostico automatico
autolayer(pro1$pred)+
autolayer(pro2$pred)
plot(djia$Close)
plot(diff(log(djia$Close)))
sbolsa<-diff(log(djia$Close))
# para saber el numero de diferenciaciones está esta funcion
ndiffs(sbolsa)
nsdiffs(sbolsa) # con cilcos estacionaes
# para saber el numero de diferenciaciones está esta funcion
ndiffs(djia$Close)
nsdiffs(djia$Close) # con cilcos estacionaes
sbolsa<-log(djia$Close)
# para saber el numero de diferenciaciones está esta funcion
ndiffs(sbolsa)
ggtsdisplay(sbolsa)
ggtsdisplay(diff(sbolsa))
fit <- auto.arima(sbolsa, seasonal=F)#,lambda="auto")
checkresiduals(fit)
fit <- auto.arima(sbolsa, seasonal=F,lambda="auto")
checkresiduals(fit)
plot(forecast(fit))
fit
ggtsdisplay(diff(sbolsa))
fit <- auto.arima(djia$Close, seasonal=F,lambda="auto")
fit
checkresiduals(fit)
air.fit <- Arima(djia$Close, order=c(3,1,3),lambda=1.726533)
bol.fit <- Arima(djia$Close, order=c(3,1,3),lambda=1.726533)
checkresiduals(bol.fit)
plot(forecast(bol.fit))
plot(forecast(bol.fit),n.ahead=100)
plot(forecast(bol.fit),h=100)
bol.fit
plot(forecast(bol.fit),h=100)
autoplot(forecast(bol.fit),h=100)
autoplot(forecast(bol.fit),h=100,col="blue")
autoplot(forecast(bol.fit),h=100,col="red")
djia$Close
autoplot(forecast(bol.fit),h=200,col="red")
bol.fit
fit <- auto.arima(djia$Close, seasonal=F ,lambda="auto")
checkresiduals(fit)
plot(forecast(fit),h=100)
plot(forecast(fit,h=100))
autoplot(forecast(bol.fit,h=200),col="red")
autoplot(forecast(bol.fit,h=200))
ggtsdisplay(Nile)
# caluclamos las diferencias básicas y estacionales
ndiffs(Nile)
nsdiffs(Nile)
ggtsdisplay(diff(Nile))
sarima(Nile,2,1,1)
sarima.for(Nile,10,2,1,1)
auto.arima(Nile, seasonal=T ,lambda="auto")
sarima(Nile,2,1,1)
Box.test(diff(Nile), lag=10, type="Ljung-Box")
x <- arima.sim(model = list(order = c(0, 0, 0)), n = 1000)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(0, 1, 0)), n = 1000)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(0, 1, 0)), n = 1000)
# Plot the generated data
plot(x)
acf2(x)
forecast::ndiffs(x)
acf2(diff(x))
x <- arima.sim(model = list(order = c(1, 1, 0)), n = 1000)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(1, 1, 0)), n = 1000)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(1, 1, 0)), n = 1000)
# Plot the generated data
plot(x)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(2, 1, 0)), n = 1000)
# Plot the generated data
plot(x)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(2, 1, 1)), n = 1000)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(0, 1,0)), n = 1000)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(0, 1,0)), n = 1000)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(0, 1,1)), n = 1000)
# Plot the generated data
plot(x)
# Plot the generated data
plot(x)
x
x <- arima.sim(model = list(order = c(1, 1,1)), n = 1000)
# Plot the generated data
plot(x)
# Plot the generated data
plot(x)
x <- arima.sim(model = list(order = c(21, 1,1)), n = 1000)
# Plot the generated data
plot(x)
acf2(diff(x))
x <- arima.sim(model = list(order = c(2, 1,1)), n = 1000)
# Plot the generated data
plot(x)
auto.arima(Nile, seasonal=T ,lambda="auto")
plot(djia$Close)
plot.zoo(djia$Close)
plot(diff(log(djia$Close)))
plot(log(diff(djia$Close)))
plot(diff(log(djia$Close)))
plot(diff(log(djia$Close)))
ggtsdisplay(djia$Close)
ggtsdisplay(diff(djia$Close))
fit <- auto.arima(djia$Close, seasonal=F ,lambda="auto")
checkresiduals(fit)
ggtsdisplay(globtemp)
# caluclamos las diferencias básicas y estacionales
ndiffs(globtemp)
nsdiffs(globtemp)
ggtsdisplay(diff(globtemp))
ggtsdisplay(diff(globtemp))+ggtitle("serie diff("globtemp"")
ggtsdisplay(diff(globtemp))+ggtitle("serie diff("globtemp")
ggtsdisplay(diff(globtemp))+ggtitle("serie "diff(globtemp)")
ggtsdisplay(diff(globtemp))+ggtitle("serie  diff(globtemp)")
ggtsdisplay(diff(globtemp), main("serie  diff(globtemp)")
ggtsdisplay(diff(globtemp), main="serie  diff(globtemp)")
ggtsdisplay(diff(globtemp))
ggtsdisplay(globtemp,main="manchas solares")
ggtsdisplay(globtemp,main=" diff globtemp")
ggtsdisplay(diff(globtemp),,main=" diff globtemp")
modelo1<-sarima(globtemp,3,1,2)
# modelo hecho automáticamente
auto.arima(globtemp)
# modelo hecho a ojo
modelo1<-sarima(globtemp,3,1,2)
modelo2<-sarima(globtemp,1,1,3)
print(paste("BIC_arima(3,1,2)=",modelo1$AIC,"BIC_arima(1,1,3)=",modelo2$AIC))
print(paste("AIC_arima(3,1,2)=",round(modelo1$AIC,2),"AIC_arima(1,1,3)=",round(modelo2$AIC,2)))
pro1<-sarima.for(globtemp, n.ahead = 20, p = 3, d = 1, q = 2)
pro2<-sarima.for(globtemp, n.ahead = 20, p = 1, d = 1, q = 3)
autoplot(globtemp) +ggtitle("Comparación modelos 1 y 2")+
#añadimos pronostico automatico
autolayer(pro1$pred)+
autolayer(pro2$pred)
periodicity(Nile)
# las gráficas
ggtsdisplay(Nile)
# calculamos las diferencias básicas y estacionales
ndiffs(Nile)
nsdiffs(Nile)
ggtsdisplay(diff(Nile))
sarima(Nile,2,1,1)
sarima.for(Nile,10,2,1,1)
auto.arima(Nile, seasonal=T ,lambda="auto")
ggtsdisplay(djia$Close)
ggtsdisplay(diff(djia$Close))
stl(Nile)
decompose(Nile)
fit <- auto.arima(djia$Close, seasonal=F ,lambda="auto")
checkresiduals(fit)
fit <- auto.arima(djia$Close, seasonal=F ,lambda="auto")
fit
bol.fit <- Arima(djia$Close, order=c(2,1,1),lambda=1.726533)
checkresiduals(bol.fit)
checkresiduals(fit)
autoplot(forecast(bol.fit,h=200))
autoplot(djia$Close)+
autolayer(fit,PI=F, col="blue",lty=1)+
autolayer(bol.fit,PI=F, col="RED",lty=2)+
```
autoplot(djia$Close)+
autolayer(fit,PI=F, col="blue",lty=1)+
autolayer(bol.fit,PI=F, col="RED",lty=2)
p01<-forecast(fit,h=100)
p02<-forecast(bol.fit,h=100)
autoplot(djia$Close)+
autolayer(p01,PI=F, col="blue",lty=1)+
autolayer(p02.fit,PI=F, col="RED",lty=2)
p02<-forecast(bol.fit,h=100)
autoplot(djia$Close)+
autolayer(p01,PI=F, col="blue",lty=1)+
autolayer(p02.fit,PI=F, col="RED",lty=2)
autoplot(djia$Close)+
autolayer(p01,PI=F, col="blue",lty=1)+
autolayer(p02,PI=F, col="RED",lty=2)
autoplot(djia$Close)+
autolayer(p01,PI=F, col="blue",lty=1)+
autolayer(p02,PI=F, col="red")
pro1
p01
djia$Close
class(djia$Close)
periodicity(djia$Close)
as.ts(djia$Close)
sbolsa<-as.ts(djia$Close)
fit <- auto.arima(sbolsa, seasonal=F ,lambda="auto")
checkresiduals(fit)
bol.fit <- Arima(sbolsa, order=c(2,1,1),lambda=1.726533)
checkresiduals(bol.fit)
p01<-forecast(fit,h=100)
p02<-forecast(bol.fit,h=100)
autoplot(sbolsa)+
autolayer(p01,PI=F, col="blue",lty=1)+
autolayer(p02,PI=F, col="red")
autoplot(sbolsa) +
autolayer(p01,PI=F,col="blue",lty=1)
autoplot(sbolsa) +
autolayer(p01,PI=F,col="blue",lty=1)+
autolayer(p02,PI=F, col="red")
autoplot(sbolsa)
sbolsa<-as.ts(djia$Close[2010/])
djia$Close[2010]
djia$Close[2010-2016]
periodicity(djia$Close)
autoplot(sbolsa, series="Datos") +
autolayer(p01,PI=F,col="blue",lty=1,series = "p01")+
autolayer(p02,PI=F, col="red",series = "p02")
autoplot(sbolsa, series="Datos") +
autolayer(p01,PI=F,lty=1,series = "p01")+
autolayer(p02,PI=F,series = "p02")
autoplot(sbolsa, series="Datos") +
autolayer(p01,PI=F,lty=1,series = "p01")+
autolayer(p02,PI=F,series = "p02")+
xlab("Year") + ylab("Departures") + ggtitle("Permanent Departures") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
sbolsa<-as.ts(djia$Close[2010/])
djia$Close[2010/]
class(djia$Close)
sbolsa<-as.ts(djia$Close)
periodicity(sbolsa)
time(Nile)
sbolsa<-as.ts(djia$Close)
index(djia$Close)
time(sbolsa)<-index(djia$Close)
first(djia$Close)
index(first(djia$Close))
as.numeric(format(index(first(djia$Close)), "%j"))
dayOfYear<-as.numeric(format(index(first(djia$Close)), "%j"))
dayOfYear
sbolsa<-as.ts(djia$Close,start=c(2006,dayOfYear), frequency = 365)
sbolsa<-ts(djia$Close,start=c(2006,dayOfYear), frequency = 365)
sbolsa
coredata(djia$Close)
sbolsa<-ts(coredata(djia$Close),start=c(2006,dayOfYear), frequency = 365)
sbolsa
periodicity(sbolsa)
plot(sbolsa)
dates <- seq(as.Date("2006-05-01"), length=5, by="days"
index(first(djia$Close))
dayOfYear<-as.numeric(format(index(first(djia$Close)), "%j"))
sb01<-ts(NA,start=c(2006,dayOfYear),end frequency = 365))
first(djia$Close)
periodicity(djia$Close)
seq(as.Date("2006-04-20"), as.Date("2016-04-20"), "days")
dates<-seq(as.Date("2006-04-20"), as.Date("2016-04-20"), "days")
dates<-seq(as.Date(first(djia$Close)), as.Date(last(djia$Close)), "days")
first(djia$Close)
dates<-seq(as.Date(index(first(djia$Close))), as.Date(index(last(djia$Close))), "days")
dates
xts(NA,order.by=dates)
length(dates)
rep(NA,length(dates))
xts(rep(NA,length(dates)),order.by=dates)
todas_fechas<-xts(rep(NA,length(dates)),order.by=dates)
lag(sbolsa)
kk<-merge(sbolsa,todas_fechas)
head(kk,12)
head(todas_fechas,12)
head(sbolsa,12)
sbolsa<-djia$Close
head(sbolsa,12)
kk<-merge(sbolsa,todas_fechas)
head(kk,12)
autoplot(kk)
sbolsa<-kk[,-2]
head(sbolsa,12)
autoplot(sbolsa)
# otra forma de rellenar datos
sbolsa1<-merge(sbolsa, index(todas_fechas), fill = na.locf)
head(sbolsa1)
head(sbolsa1,12)
sbolsa1<-merge(sbolsa,dates, fill = na.locf)
head(sbolsa1,12)
# pasamos los datos a semanas
endpoints(sbolsa1, on = "weeks")
sbolsa1(endpoints(sbolsa1, on = "weeks"))
sbolsa1[endpoints(sbolsa1, on = "weeks")]
a<-sbolsa1[endpoints(sbolsa1, on = "weeks")]
plot(a[2010/])
a
class(a)
plot(a["2010/"])
plot(a["2010/2015"])
plot(a["2010/2014"])
plot(a["2007/2013"])
b<-a["2007/2013"])
plot(b)
b<-a["2007/2013"])
b<-a["2007/2013"]
plot(b)
bol.fit <- Arima(b, order=c(2,1,1),lambda=1.726533)
checkresiduals(bol.fit)
ggtsdisplay(b)
ggtsdisplay(diff(b))
adf.test(diff(b), alternative = "stationary")
is.na(b)
sum(is.na(b))
count(is.na(b))
adf.test(diff(b), alternative = "stationary")
head(b)
head(diff(b))
head(lag(diff(b)))
head(lag(diff(b)),-1)
head(lag(diff(b),-1))
adf.test(lag(diff(b),-1), alternative = "stationary")
lag(diff(b),-1)
na.omit(b)
adf.test(na.omit(b), alternative = "stationary")
#creamos una secuencia de dias sin huecos
#para lo que hacemos una secuencia de fechas
sbolsa<-djia$Close
dates<-seq(as.Date(index(first(sbolsa))), as.Date(index(last(sbolsa))), "days")
# Ahora rellenamos los huecos uniendo otra forma de rellenar datos
sbolsa1<-merge(sbolsa,dates, fill = na.locf)
head(sbolsa1,12)
# pasamos los datos a semanas
#endpoints(sbolsa1, on = "weeks") --> selecciona las fechas fin de la semana
dj_semanal<-sbolsa1[endpoints(sbolsa1, on = "weeks")]
dj_semanal
dj_semanal<-dj_semanal["2007/2013"]
ggtsdisplay(diff(dj_semanal))
# como vemos es ruido blanco
adf.test(na.omit(diff(dj_semanal)), alternative = "stationary")
ndiffs(dj_semanal)
adf.test((diff(dj_semanal)), alternative = "stationary")
# como vemos es ruido blanco
adf.test(na.omit(diff(dj_semanal)), alternative = "stationary")
# pasamos los datos a semanas
#endpoints(sbolsa1, on = "weeks") --> selecciona las fechas fin de la semana
dj_semanal<-sbolsa1[endpoints(sbolsa1, on = "weeks")]
ggtsdisplay(diff(dj_semanal))
# como vemos es ruido blanco
adf.test(na.omit(diff(dj_semanal)), alternative = "stationary")
auto.arima(dj_semanal)
plot(gold)
stl(gold)
stl(na.omit(gold))
gold
tsclean(gold)
stl(tsclean(gold))
stl(tsclean(gold), s.windows="periodic")
stl(tsclean(gold), s.window="periodic")
stl(tsclean(gold), s.window="periodic")
tsclean(gold)
ts(tsclean(gold),start = c(1985,1),frecuency=365)
a<-ts(tsclean(gold),start = c(1985,1),frecuency=365)
a<-ts(tsclean(gold),start = c(1985,1),frequency=365)
stl(a)
stl(a, s.window="periodic")
plot(stl(a, s.window="periodic"))
str(gold)
stl(sbolsa)
stl(dj_semanal)
stl(ts(dj_semanal,start = c(1985,1),frequency=365))
dj_semanal
stl(ts(dj_semanal$Close,start = c(1985,1),frequency=365))
stl(ts(coredata(dj_semanal$Close),start = c(1985,1),frequency=365))
coredata(dj_semanal$Close)
stl(ts(coredata(dj_semanal$Close),start = c(1980,1),frequency=52))
ts(coredata(dj_semanal$Close),start = c(1980,1),frequency=52)
a<-ts(coredata(dj_semanal$Close),start = c(1980,1),frequency=52)
stl(a)
plot(stl(a, s.window="periodic"))
head(a)
coredata(dj_semanal$Close
coredata(dj_semanal$Close)
a<-ts(dj_semanal$Close,start = c(1980,1),frequency=52)
head(a)
plot(stl(a, s.window="periodic"))
plot(a)
ggtsdisplay(gold)
ndiffs(gold)
ggtsdisplay(diff(gold))
auto.arima(gold)
blogdown:::serve_site()
nsdiffs(sunspot.year)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# vamos a ver de qué años es la serie:
periodicity(AirPassengers)
blogdown:::serve_site()
blogdown:::serve_site()
stl(AirPassengers,"per")
stl(AirPassengers,"per")
stl(Nile,"per")
sarima(Nile,2,1,1)
sarima(Nile,2,1,1,details=FALSE)
# modelo hecho automáticamente
auto.arima(globtemp), stepwise = FALSE)# con esto hacemos que trabaje mas el buscador de modelos
# modelo hecho automáticamente
auto.arima(globtemp, stepwise = FALSE)# con esto hacemos que trabaje mas el buscador de modelos
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Gráficas ACF y PACF de la serie Nile con forecast
library(forecast)
# Gráficas ACF y PACF de la serie Nile con forecast
library(forecast)
ggtsdisplay(Nile,main='Caudal anual max del río Nilo')
ggtsdisplay(diff(sunspot.year), main="diff de manchas solares")
adf.test(diff(sunspot.year), alternative = "stationary")
library(tseries)
library(tseries)
adf.test(diff(sunspot.year), alternative = "stationary")
adf.test(rnorm(1000), alternative = "stationary")
adf.test(rnorm(1000))
adf.test(diff(sunspot.year), alternative = "stationary")
adf.test(diff(sunspot.year), k=12)
adf.test(diff(sunspot.year), k=10)
ndiffs(diff(sunspot.year), test="adf")
ndiffs(WWWusage)
ndiffs(diff(sunspot.year), test="kpss")
library(tseries)
adf.test(diff(sunspot.year), alternative = "stationary")
adf.test(sunspot.year, alternative = "stationary")
adf.test(Nile, alternative = "stationary")
adf.test(Nile)
adf.test(diff(sunspot.year), alternative = "stationary")
adf.test(Nile)
# aplico modelo
mod<-sarima(sunspot.year,8,1,0)
mod$AIC
mod<-sarima(sunspot.year,0,1,1)
mod$AIC
# cargamos las librerías
library(astsa)
# aplico modelo
mod<-sarima(sunspot.year,8,1,0)
mod$AIC
mod<-sarima(sunspot.year,0,1,1)
mod$AIC
mod<-sarima(sunspot.year,1,1,1)
mod$AIC
mod<-sarima(sunspot.year,2,1,1)
mod<-sarima(sunspot.year,2,1,2)
mod<-sarima(sunspot.year,3,1,0)
mod<-sarima(sunspot.year,8,1,0)
mod<-sarima(sunspot.year,4,1,1)
# aplico modelo
mod<-sarima(sunspot.year,8,1,0)
adf.test(sunspot.year, alternative = "stationary")
adf.test(sunspot.year)
adf.test(sunspot.year,k=12)
