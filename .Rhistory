"
)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1(Yaya-Yayo)-->15[Papá-Mamá];
1-->3[Tía A];
1-->10[Tío B-B1];
1-->6[Tío C-C1];
15-->16[Yo-Tú]
16-->18[hijo1]
16-->19[hijo2]
style 1 fill:#E5E25F;
style 6 fill:#81F7BE;
style 19 fill:#FAAC58;
style 16 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1(Yaya-Yayo)-->15[Papá-Mamá];
1-->3[Tía A];
1-->10[Tío B-B1];
1-->6[Tío C-C1];
15-->16[Yo-Tú]
16-->18[hijo1]
16-->19[hijo2]
style 1 fill:#E5E25F;
style 15 fill:#81F7BE;
style 19 fill:#FAAC58;
style 16 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1(Yaya-Yayo)-->15[Papá-Mamá];
1-->3[Tía A];
1-->10[Tío B-B1];
1-->6[Tío C-C1];
15-->16[Yo-Tú]
16-->18[hijo1]
16-->19[hijo2]
#opciones de estilo
style 1 fill:#E5E25F;
style 15 fill:#81F7BE;
style 19 fill:#FAAC58;
style 16 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1(Yaya-Yayo)-->15[Papá-Mamá];
1-->3[Tía A];
1-->10[Tío B-B1];
1-->6[Tío C-C1];
15-->16[Yo-Tú]
16-->18[hijo1]
16-->19[hijo2]
style 1 fill:#E5E25F;
style 15 fill:#81F7BE;
style 19 fill:#FAAC58;
style 16 fill:#FA58F4
"
)
familia<-data.frame(stringsAsFactors=FALSE,
ind = c(1, 2, 3, 6, 5, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 100,
102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124,
126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174),
father = c(126, 128, 1, 1, 1, 1, 3, 3, 0, 4, 0, 0, 10, 10, 10, 10, 126,
0, 126, 126, 0, 128, 128, 3, 0, 116, 116, 116, 116, 0, 0, 0,
7, 7, 0, 136, 136, 0, 8, 8, 8, 0, 150, 150, 0, 156, 156, 0, 122,
122, 0, 0, 4, 4),
mother = c(102, 108, 2, 2, 2, 2, 9, 9, 0, 11, 0, 0, 12, 12, 12, 12, 102,
0, 102, 102, 0, 108, 108, 9, 0, 5, 5, 5, 5, 0, 0, 0, 130, 130,
0, 114, 114, 0, 142, 142, 142, 0, 118, 118, 0, 120, 120, 0,
162, 162, 0, 0, 11, 11),
sex = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2,
1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1,
2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2),
nom = c("Pedro", "Espe", "Antonio", "Josefina", "Paquita", "Pepe",
"Guillermo", "Antonio", "M_Luisa", "Fer", "M_Carmen", "Eva",
"Guillermo", "Marina", "Eva", "Sofia", "Antonio", "Josefa",
"Pascual", "Juana", "Francisca", "Pepe", "Ramon", "Susana", "Manolo",
"Raquel", "Elena", "Manolo", "Paco", "Antonio", "Cristobal",
"M_Jose", "Laura", "Jaime", NA, "Nicolas", "Julieta", "Ana",
"Sara", "Javier", "Diego", "Pepe", "Beatriz", "Jose", "Antonio",
"Santiago", "David", "Tati", "Pablo", "Alba", "Juan", "Santiago",
"Mamen", "Cristina"),
status = c(1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
)
head(familia)
tail(familia)
fam1<-pedigree(id=familia$ind,
dadid = familia$father,
momid = familia$mother,
sex = familia$sex,
status = familia$status)
###
library(kinship2)
fam1<-pedigree(id=familia$ind,
dadid = familia$father,
momid = familia$mother,
sex = familia$sex,
status = familia$status)
# plot.pedigree {kinship2}
plot(fam1)
plot(fam2)
fam2<-pedigree(id=familia$ind,
dadid = familia$father,
momid = familia$mother,
sex = familia$sex,
status = familia$status,
relation=relaciones)
fam2<-pedigree(id=familia$ind,
dadid = familia$father,
momid = familia$mother,
sex = familia$sex,
status = familia$status)
plot(fam2)
id2 <- paste( familia$nom,fam2$id,sep="\n")
plot(fam2, id=id2,symbolsize=1,cex=0.8)
plot(fam2)
id2 <- paste( familia$nom,fam2$id,sep="\n")
plot(fam2, id=id2,symbolsize=1,cex=0.8)
# pintamos ocn colores
plot(fam2, col=ifelse(familia$sex==1,1,2), id=id2,cex=0.8)
relate2 <- matrix(c(210,211,1,212,213,3), nrow=2, byrow=TRUE)
kin2 <- kinship(fam1)
toLatex(sessionInfo())
gen.df<-data.frame(familia$ind, familia$father, familia$mother, familia$sex-1)
genEx<-gen.genealogy(familia)
gen.graph(genEx)
print(pedAll)
gen.graph(genEx)
gen.graph(genEx)
kin2 <- kinship(ped2basic)
ped2 <- pedigree(df2$id, df2$father, df2$mother, + df2$sex, status=df2$censor)
df2 <- sample.ped[sample.ped$ped==2,]
names(df2)
df2$censor <- c(1,1, rep(0, 12))
ped2 <- pedigree(df2$id, df2$father, df2$mother, + df2$sex, status=df2$censor)
gen.graph(ped2)
kin2 <- kinship(fam1)
kin2
familia<-data.frame(stringsAsFactors=FALSE,
ind = c(1, 2, 3, 6, 5, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 100,
102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124,
126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174),
father = c(126, 128, 1, 1, 1, 1, 3, 3, 0, 4, 0, 0, 10, 10, 10, 10, 126,
0, 126, 126, 0, 128, 128, 3, 0, 116, 116, 116, 116, 0, 0, 0,
7, 7, 0, 136, 136, 0, 8, 8, 8, 0, 150, 150, 0, 156, 156, 0, 122,
122, 0, 0, 4, 4),
mother = c(102, 108, 2, 2, 2, 2, 9, 9, 0, 11, 0, 0, 12, 12, 12, 12, 102,
0, 102, 102, 0, 108, 108, 9, 0, 5, 5, 5, 5, 0, 0, 0, 130, 130,
0, 114, 114, 0, 142, 142, 142, 0, 118, 118, 0, 120, 120, 0,
162, 162, 0, 0, 11, 11),
sex = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2,
1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1,
2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2),
nom = c("Pedro", "María", "Antonio", "Eva", "Ruth", "Santiago",
"Javier", "Fernando", "M_Luisa", "Angel", "M_Carmen", "Eva",
"Jaime", "Mar", "Eva", "Ana", "Antonio", "Josefa",
"Pascual", "Juana", "Francisca", "Pepe", "Ramon", "Susana", "Manolo",
"Raquel", "Javier", "Manolo", "Paco", "Antonio", "Cristobal",
"M_Jose", "Laura", "Jaime", NA, "Nicolas", "Julieta", "Ana",
"Sara", "Javier", "Diego", "Pepe", "Beatriz", "Jose", "Antonio",
"Santiago", "David", "Ana", "Angel", "Alba", "Juan", "Santiago",
"Malen", "Cristina"),
status = c(1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
)
# ojo va con ; en lugar de comas
#familia<-read.csv("familia1.csv",sep = ";",header = T)
#head(familia)
#tail(familia)
fam1<-pedigree(id=familia$ind,
dadid = familia$father,
momid = familia$mother,
sex = familia$sex,
status = familia$status)
# plot.pedigree {kinship2}
plot(fam1)
#pintamos lo nombres
id2 <- paste(fam1$id, familia$nom,sep="\n")
plot(fam1, id=id2,symbolsize=1,cex=0.8)
pedigree.legend(fam1, location="topright", radius=.3)
# ñadimos colores según sexo
plot(fam1, col=ifelse(familia$sex==1,1,2), id=id2,cex=0.8)
pedigree.legend(fam1, location="topright", radius=.3)
# formamos la tabla
gen.df<-data.frame(familia$ind, familia$father, familia$mother, familia$sex-1)
# cramos genealogía
genEx<-gen.genealogy(familia)
# Pintamos grafica
gen.graph(genEx)
familia<-data.frame(stringsAsFactors=FALSE,
ind = c(1, 2, 3, 6, 5, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 100,
102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124,
126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174),
father = c(126, 128, 1, 1, 1, 1, 3, 3, 0, 4, 0, 0, 10, 10, 10, 10, 126,
0, 126, 126, 0, 128, 128, 3, 0, 116, 116, 116, 116, 0, 0, 0,
7, 7, 0, 136, 136, 0, 8, 8, 8, 0, 150, 150, 0, 156, 156, 0, 122,
122, 0, 0, 4, 4),
mother = c(102, 108, 2, 2, 2, 2, 9, 9, 0, 11, 0, 0, 12, 12, 12, 12, 102,
0, 102, 102, 0, 108, 108, 9, 0, 5, 5, 5, 5, 0, 0, 0, 130, 130,
0, 114, 114, 0, 142, 142, 142, 0, 118, 118, 0, 120, 120, 0,
162, 162, 0, 0, 11, 11),
sex = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2,
1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1,
2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2),
nom = c("Pedro", "María", "Antonio", "Eva", "Ruth", "Santiago",
"Javier", "Fernando", "M_Luisa", "Angel", "M_Carmen", "Eva",
"Jaime", "Mar", "Eva", "Ana", "Antonio", "Josefa",
"Pascual", "Juana", "Francisca", "Pepe", "Ramon", "Susana", "Manolo",
"Raquel", "Javier", "Manolo", "Paco", "Antonio", "Cristobal",
"M_Jose", "Laura", "Jaime", NA, "Nicolas", "Julieta", "Ana",
"Sara", "Javier", "Diego", "Pepe", "Beatriz", "Jose", "Antonio",
"Santiago", "David", "Ana", "Angel", "Alba", "Juan", "Santiago",
"Malen", "Cristina"),
status = c(1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
)
head(familia)
library(knitr)
library(kableExtra)
kable(head(familia),"html")
kable(head(familia),"html",booktabs=T)
library(kinship2)
# creamos las relaciones
fam1<-pedigree(id=familia$ind,
dadid = familia$father,
momid = familia$mother,
sex = familia$sex,
status = familia$status)
#Pintamos el árbol genealigico
#plot.pedigree {kinship2}
plot(fam1)
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
knitr::opts_chunk$set(echo = TRUE)
st_write(autonomias, ask = TRUE)
ruta_actual<-getwd()
setwd("C:/R/publicaciones/enrdados_en_espera/")
# Leemos capa autonomías
autonomias <- st_read("capas/Comunidades autonomas.shp")
setwd("C:/R/publicaciones/enrdados_en_espera/")
library(sf)
library(sf)
# Leemos capa autonomías
autonomias <- st_read("capas/Comunidades autonomas.shp")
setwd("C:/R/publicaciones/enrdados_en_espera")
# Leemos capa autonomías
autonomias <- st_read("capas/Comunidades autonomas.shp")
# Leemos capa autonomías
autonomias <- st_read("../../static/capas/Comunidades autonomas.shp")
class(autonomias)
# pintamos la geometría de la capa
plot(st_geometry(autonomias))
st_write(autonomias, ask = TRUE)
st_write(autonomias, "ccaa.shp",ask = TRUE)
library(DiagrammeR)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1[sf]-->2[sfc];
2-->3[sfg];
2-->4[CRS];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT )
3-->32(LINESTRING)
3-->33(MULTILINESTRING )
3-->34(POLYGON )
3-->35(MULTIPOLYGON )
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
puntos1<- st_point(lon=c(-3.7025599,2.1589899, -0.37739, -5.9731698),
lat= c( 	40.4165001,41.3887901,39.4697495,37.3828316))
puntos1<- st_point(c(-3.7025599,2.1589899, -0.37739, -5.9731698),
c( 	40.4165001,41.3887901,39.4697495,37.3828316))
plot(puntos1)
puntos1
punto1<- st_point(c(-3.7025599,40.4165001))
class(punto1)
linea1<- st_linestring(rbind(c(-3.7025599,40.4165001),c(2.1589899,41.3887901))
2.1589899, -0.37739, -5.9731698),
linea1<- st_linestring(rbind(c(-3.7025599,40.4165001),c(2.1589899,41.3887901)))
class(linea1)
plot(linea1)
plot(punto1,add=T)
plot(linea1)
plot(punto1,add=T)
plot(linea1)
plot(punto1,add=T, col="red")
# Creamos una capa sfc con las geomerías sfg del ejemplo anterior
coleccion<-st_sfc(punto1, linea1, crs = 4326)
class(coleccion)
# pintamos los sfc
plot(coleccion)
coleccion
st_crs(coleccion)
# Creamos una data frame
data <- data.frame(nombre = c("punto", "Linea"))
st_sf(cbind(data, coleccion))
st_sf(data, coleccion)
objeto_sf<- st_sf(data, coleccion)
class(objeto_sf)
objeto_sf
library(dplyr)
# vemos las variables que tiene la capa (la geometría es una de ellas)
summary(autonomias)
# vemos las variables que tiene la capa (la geometría es una de ellas)
class(autonomias)
head(autonomias$NOM_CCAA)
## seleccion
# todas las CCAA menos Canarias
autonomias %>% select(COD_CCAA)%>% filter(COD_CCAA!="04") %>% plot()
# Canarias sola
autonomias %>% select(COD_CCAA)%>% filter(COD_CCAA=="04") %>% plot()
st_set_geometry(objeto_sf,NULL)
# solo la geometría
st_geometry(objeto_sf)
blogdown:::serve_site()
blogdown:::serve_site()
puntos <- data.frame(ID = 1:4, lon = c(-2, 1,-1.5,0),lat = c(41, 42,40.5,40.6))
# pintamos los puntos
#plot(st_geometry(autonomias), col = "grey")
#points(puntos$lon,puntos$lat,col="red",pch = 19)
puntos <- st_as_sf(puntos, coords = c("lon", "lat"),crs=crs(autonomias, asText = TRUE))
# pintamos los puntos
#plot(st_geometry(autonomias), col = "grey")
#points(puntos$lon,puntos$lat,col="red",pch = 19)
puntos <- st_as_sf(puntos, coords = c("lon", "lat"),crs=st_crs(autonomias, asText = TRUE))
puntos_buf <- st_buffer(puntos, dist = 1)
#plot(st_geometry(autonomias))
plot(st_geometry(puntos_buf),col = "firebrick")
plot(st_geometry(puntos), pch = 16,col = "forestgreen", add = TRUE)
plot(st_geometry(puntos_buf),col = "firebrick")
plot(st_geometry(puntos), pch = 16,col = "forestgreen", add = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
# cargo librería sf
library(sf)
# generamos un poligono formado por otros 2
# resultado de dividir un cuadrado por la diagonal
m1 = cbind(c(0, 0, 1, 0), c(0, 1, 1, 0))
m2 = cbind(c(0, 1, 1, 0), c(0, 0, 1, 0))
# transformamos en una lista sf los 2 pol
pol0 = st_sfc(st_polygon(list(m1)), st_polygon(list(m2)))
pol<-st_sf(pol0)
zona<-st_union(pol)
# pintamos los dos poligonos
plot(pol)
text(x=c(0.25,0.75), y=c(0.75,0.25), labels = 1:2)
# generamos 5 puntos
p5<-st_sample(zona,size=5)
plot(p5,pch = 5,lwd=5, add = TRUE)
# pintamos los dos poligonos
plot(pol)
text(x=c(0.25,0.75), y=c(0.75,0.25), labels = 1:2)
plot(st_geometry(p5),pch = 5,lwd=5, add = TRUE)
# pintamos los dos poligonos
plot(st_geometry(pol))
text(x=c(0.25,0.75), y=c(0.75,0.25), labels = 1:2)
plot(p5,pch = 5,lwd=5, add = TRUE)
# generamos un capa de bufer
p5_buffer<-st_buffer(p5,dist=0.1)
plot(p5_buffer, add = TRUE)
# bufer contenido en rectanguno
vecinos_cont <- st_contains(zona,p5_buffer)
cont <- vecinos_cont[[1]]
plot(p5_buffer[cont], add = TRUE, col = "yellow")
plot(p5_buffer[cont], add = TRUE, col = alpha("yellow", 0.4))
plot(p5_buffer[cont], add = TRUE, col = scales::alpha("yellow", 0.4))
# pintamos los dos poligonos
plot(st_geometry(pol))
text(x=c(0.25,0.75), y=c(0.75,0.25), labels = 1:2)
# generamos 5 puntos
p5<-st_sample(zona,size=5)
plot(p5,pch = 5,lwd=5, add = TRUE)
# generamos un capa de bufer
p5_buffer<-st_buffer(p5,dist=0.1)
plot(p5_buffer, add = TRUE)
# bufer contenido en rectanguno
vecinos_cont <- st_contains(zona,p5_buffer)
cont <- vecinos_cont[[1]]
plot(p5_buffer[cont], add = TRUE, col = scales::alpha("yellow", 0.4))
plot(p5_buffer[cont], add = TRUE, col = rgb("yellow", 0.4))
zona<-pol0[[1]]
plot(zona, col="grey")
plot(p5,pch = 5,lwd=5, add = TRUE)
plot(p5_buffer, add = TRUE)
# bufer contenido en poligono
vecinos_inter <- st_intersects(zona,p5_buffer)
inter <- vecinos_inter[[1]]
plot(p5_buffer[inter], add = TRUE, col = "yellow")
# recortamos con clip
vecinos_clip <- st_intersection(p5_buffer, zona)
plot(zona, col="grey")
plot(p5,pch = 5,lwd=5, add = TRUE)
plot(p5_buffer, add = TRUE)
plot(p5_buffer[inter], add = TRUE, col = scales::alpha("yellow", 0.4))
# recortamos con clip
vecinos_clip <- st_intersection(p5_buffer, zona)
plot(vecinos_clip, add = TRUE, col = "red")
plot(zona, col="grey")
plot(p5,pch = 5,lwd=5, add = TRUE)
plot(p5_buffer, add = TRUE)
# bufer contenido en poligono
vecinos_inter <- st_intersects(zona,p5_buffer)
inter <- vecinos_inter[[1]]
plot(p5_buffer[inter], add = TRUE, col = scales::alpha("yellow", 0.4))
# recortamos con clip
vecinos_clip <- st_intersection(p5_buffer, zona)
plot(vecinos_clip, add = TRUE, col = scales::alpha("red", 0.5))
blogdown:::serve_site()
library(DiagrammeR)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1[sf]-->2[  sfc  ];
2-->3[  sfg  ];
2-->4[  CRS  ];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT)
3-->32(LINESTRING)
3-->33(MULTILINESTRING)
3-->34(POLYGON)
3-->35(MULTIPOLYGON)
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph TD;
1[sf]-->2[     sfc    ];
2-->3[    sfg    ];
2-->4[    CRS    ];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT)
3-->32(LINESTRING)
3-->33(MULTILINESTRING)
3-->34(POLYGON)
3-->35(MULTIPOLYGON)
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph RL;
1[sf]-->2[     sfc    ];
2-->3[    sfg    ];
2-->4[    CRS    ];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT)
3-->32(LINESTRING)
3-->33(MULTILINESTRING)
3-->34(POLYGON)
3-->35(MULTIPOLYGON)
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
# arbol genealógico sencillo
DiagrammeR("graph LR;
1[sf]-->2[     sfc    ];
2-->3[    sfg    ];
2-->4[    CRS    ];
1-->5[data.frame];
3-->30(POINT)
3-->31(MULTIPOINT)
3-->32(LINESTRING)
3-->33(MULTILINESTRING)
3-->34(POLYGON)
3-->35(MULTIPOLYGON)
style 1 fill:#E5E25F;
style 2 fill:#81F7BE;
style 3 fill:#FAAC58;
style 4 fill:#FA58F4
"
)
library(sf)
# Crear la geometría de un punto
punto1<- st_point(c(-3.7,40.41))
punto2<- st_point(c(-2.5,39.25))
class(punto1)
multip<-st_multipoint(punto1,punto2)
multip<-st_multipoint(rbind(punto1,punto2))
class(multip)
blogdown:::serve_site()
